
GatewayProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  00005018  2**0
                  CONTENTS
  4 .ARM          00000000  08003c58  08003c58  00005018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c58  08003c58  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003c60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005018  2**0
                  CONTENTS
 10 .bss          00012e14  20000018  20000018  00005018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e2c  20012e2c  00005018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3ac  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000202c  00000000  00000000  000113f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  00013420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cd  00000000  00000000  00013fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021485  00000000  00000000  00014895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f629  00000000  00000000  00035d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0006  00000000  00000000  00045343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115349  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e84  00000000  00000000  0011538c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00118210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b28 	.word	0x08003b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08003b28 	.word	0x08003b28

080001d0 <Adc_GetHwUnit>:
static Adc_ValueGroupType* AdcResultBuffer[ADC_GROUP_COUNT] = {NULL};
static uint8 AdcStreamSampleCount[ADC_GROUP_COUNT] = {0}; /* Đếm số mẫu trong streaming mode */
static uint8 clockEnabled[3] = {0}; /* Hỗ trợ ADC1, ADC2, ADC3 */

/* Hàm hỗ trợ: Lấy con trỏ ADC từ HwUnit */
static ADC_TypeDef* Adc_GetHwUnit(Adc_HwUnitType HwUnit) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
    if (HwUnit >= ADC_HW_UNIT_1 && HwUnit <= ADC_HW_UNIT_3) {
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d007      	beq.n	80001f0 <Adc_GetHwUnit+0x20>
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b03      	cmp	r3, #3
 80001e4:	d804      	bhi.n	80001f0 <Adc_GetHwUnit+0x20>
        return adcMap[HwUnit];
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <Adc_GetHwUnit+0x30>)
 80001ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ee:	e000      	b.n	80001f2 <Adc_GetHwUnit+0x22>
    }
    return NULL;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	08003b58 	.word	0x08003b58

08000204 <Adc_EnableClock>:

/* Hàm hỗ trợ: Kích hoạt clock cho ADC */
static void Adc_EnableClock(Adc_HwUnitType HwUnit) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
    if (HwUnit >= ADC_HW_UNIT_1 && HwUnit <= ADC_HW_UNIT_3 && !clockEnabled[HwUnit - ADC_HW_UNIT_1]) {
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d02d      	beq.n	8000270 <Adc_EnableClock+0x6c>
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	2b03      	cmp	r3, #3
 8000218:	d82a      	bhi.n	8000270 <Adc_EnableClock+0x6c>
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	3b01      	subs	r3, #1
 800021e:	4a17      	ldr	r2, [pc, #92]	@ (800027c <Adc_EnableClock+0x78>)
 8000220:	5cd3      	ldrb	r3, [r2, r3]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d124      	bne.n	8000270 <Adc_EnableClock+0x6c>
        clockEnabled[HwUnit - ADC_HW_UNIT_1] = 1;
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	3b01      	subs	r3, #1
 800022a:	4a14      	ldr	r2, [pc, #80]	@ (800027c <Adc_EnableClock+0x78>)
 800022c:	2101      	movs	r1, #1
 800022e:	54d1      	strb	r1, [r2, r3]
        switch (HwUnit) {
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d014      	beq.n	8000260 <Adc_EnableClock+0x5c>
 8000236:	2b03      	cmp	r3, #3
 8000238:	dc19      	bgt.n	800026e <Adc_EnableClock+0x6a>
 800023a:	2b01      	cmp	r3, #1
 800023c:	d002      	beq.n	8000244 <Adc_EnableClock+0x40>
 800023e:	2b02      	cmp	r3, #2
 8000240:	d007      	beq.n	8000252 <Adc_EnableClock+0x4e>
            case ADC_HW_UNIT_1: RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; break;
            case ADC_HW_UNIT_2: RCC->APB2ENR |= RCC_APB2ENR_ADC2EN; break;
            case ADC_HW_UNIT_3: RCC->APB2ENR |= RCC_APB2ENR_ADC3EN; break;
            default: break;
 8000242:	e014      	b.n	800026e <Adc_EnableClock+0x6a>
            case ADC_HW_UNIT_1: RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; break;
 8000244:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <Adc_EnableClock+0x7c>)
 8000246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000248:	4a0d      	ldr	r2, [pc, #52]	@ (8000280 <Adc_EnableClock+0x7c>)
 800024a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800024e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000250:	e00e      	b.n	8000270 <Adc_EnableClock+0x6c>
            case ADC_HW_UNIT_2: RCC->APB2ENR |= RCC_APB2ENR_ADC2EN; break;
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <Adc_EnableClock+0x7c>)
 8000254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000256:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <Adc_EnableClock+0x7c>)
 8000258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800025c:	6453      	str	r3, [r2, #68]	@ 0x44
 800025e:	e007      	b.n	8000270 <Adc_EnableClock+0x6c>
            case ADC_HW_UNIT_3: RCC->APB2ENR |= RCC_APB2ENR_ADC3EN; break;
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <Adc_EnableClock+0x7c>)
 8000262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000264:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <Adc_EnableClock+0x7c>)
 8000266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800026a:	6453      	str	r3, [r2, #68]	@ 0x44
 800026c:	e000      	b.n	8000270 <Adc_EnableClock+0x6c>
            default: break;
 800026e:	bf00      	nop
        }
    }
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	2000004c 	.word	0x2000004c
 8000280:	40023800 	.word	0x40023800

08000284 <Adc_ConfigureTimer2>:

/* Hàm hỗ trợ: Cấu hình TIM2 cho hardware trigger */
static void Adc_ConfigureTimer2(uint16 TimerPsc, uint16 TimerArr) {
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	80fb      	strh	r3, [r7, #6]
 8000290:	4613      	mov	r3, r2
 8000292:	80bb      	strh	r3, [r7, #4]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; /* Bật clock cho TIM2 */
 8000294:	4b13      	ldr	r3, [pc, #76]	@ (80002e4 <Adc_ConfigureTimer2+0x60>)
 8000296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000298:	4a12      	ldr	r2, [pc, #72]	@ (80002e4 <Adc_ConfigureTimer2+0x60>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->CR1 = 0; /* Reset CR1 */
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
    TIM2->CR2 |= (0x2 << 4); /* MMS = 010: Update event làm trigger */
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	6053      	str	r3, [r2, #4]
    TIM2->PSC = TimerPsc; /* Prescaler */
 80002b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->ARR = TimerArr; /* Auto-reload */
 80002c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c4:	88bb      	ldrh	r3, [r7, #4]
 80002c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CR1 |= (1 << 0); /* CEN = 1: Bật timer */
 80002c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40023800 	.word	0x40023800

080002e8 <Adc_ConfigureDma>:

/* Hàm hỗ trợ: Cấu hình DMA cho scan mode */
static void Adc_ConfigureDma(Adc_GroupType Group, ADC_TypeDef* adc) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; /* Bật clock cho DMA2 */
 80002f4:	4b29      	ldr	r3, [pc, #164]	@ (800039c <Adc_ConfigureDma+0xb4>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a28      	ldr	r2, [pc, #160]	@ (800039c <Adc_ConfigureDma+0xb4>)
 80002fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30
    DMA2_Stream0->CR = 0; /* Reset CR */
 8000300:	4b27      	ldr	r3, [pc, #156]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
    DMA2_Stream0->PAR = (uint32_t)&adc->DR; /* Peripheral address */
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800030c:	4b24      	ldr	r3, [pc, #144]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 800030e:	609a      	str	r2, [r3, #8]
    DMA2_Stream0->M0AR = (uint32_t)AdcResultBuffer[Group]; /* Memory address */
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4a24      	ldr	r2, [pc, #144]	@ (80003a4 <Adc_ConfigureDma+0xbc>)
 8000314:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000318:	4b21      	ldr	r3, [pc, #132]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 800031a:	60da      	str	r2, [r3, #12]
    DMA2_Stream0->NDTR = AdcConfigPtr[Group].NumChannels * AdcConfigPtr[Group].StreamNumSamples; /* Số lượng dữ liệu */
 800031c:	4b22      	ldr	r3, [pc, #136]	@ (80003a8 <Adc_ConfigureDma+0xc0>)
 800031e:	6819      	ldr	r1, [r3, #0]
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	4613      	mov	r3, r2
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	4413      	add	r3, r2
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	440b      	add	r3, r1
 800032c:	7a1b      	ldrb	r3, [r3, #8]
 800032e:	4618      	mov	r0, r3
 8000330:	4b1d      	ldr	r3, [pc, #116]	@ (80003a8 <Adc_ConfigureDma+0xc0>)
 8000332:	6819      	ldr	r1, [r3, #0]
 8000334:	79fa      	ldrb	r2, [r7, #7]
 8000336:	4613      	mov	r3, r2
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	4413      	add	r3, r2
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	440b      	add	r3, r1
 8000340:	7c1b      	ldrb	r3, [r3, #16]
 8000342:	fb03 f200 	mul.w	r2, r3, r0
 8000346:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000348:	605a      	str	r2, [r3, #4]
    DMA2_Stream0->CR |= (0x0 << 6); /* PL = 00: Low priority */
 800034a:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 800034c:	4a14      	ldr	r2, [pc, #80]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= (0x1 << 10); /* MSIZE = 01: 16-bit */
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a12      	ldr	r2, [pc, #72]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800035c:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= (0x1 << 8); /* PSIZE = 01: 16-bit */
 800035e:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a0f      	ldr	r2, [pc, #60]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000368:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= (1 << 11); /* MINC = 1: Increment memory */
 800036a:	4b0d      	ldr	r3, [pc, #52]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a0c      	ldr	r2, [pc, #48]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000370:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000374:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= (1 << 25); /* CIRC = 1: Circular mode */
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a09      	ldr	r2, [pc, #36]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 800037c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000380:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= (1 << 0); /* EN = 1: Bật DMA */
 8000382:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a06      	ldr	r2, [pc, #24]	@ (80003a0 <Adc_ConfigureDma+0xb8>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6013      	str	r3, [r2, #0]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40026410 	.word	0x40026410
 80003a4:	2000003c 	.word	0x2000003c
 80003a8:	20000034 	.word	0x20000034

080003ac <Adc_Init>:
/**
 * @brief Initializes the ADC module with the provided configuration.
 * @param ConfigPtr Pointer to the ADC configuration structure.
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Adc_Init(const Adc_ConfigType* ConfigPtr) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    if (ConfigPtr == NULL) return E_NOT_OK;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d101      	bne.n	80003be <Adc_Init+0x12>
 80003ba:	2301      	movs	r3, #1
 80003bc:	e1d2      	b.n	8000764 <Adc_Init+0x3b8>

    AdcConfigPtr = ConfigPtr;
 80003be:	4aa6      	ldr	r2, [pc, #664]	@ (8000658 <Adc_Init+0x2ac>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6013      	str	r3, [r2, #0]

    for (uint8 i = 0; i < ADC_GROUP_COUNT; i++) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e1c7      	b.n	800075a <Adc_Init+0x3ae>
        /* Kiểm tra tính hợp lệ của cấu hình */
        if (ConfigPtr[i].NumChannels == 0 || ConfigPtr[i].NumChannels > 16 ||
 80003ca:	7bfa      	ldrb	r2, [r7, #15]
 80003cc:	4613      	mov	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4413      	add	r3, r2
 80003d2:	00db      	lsls	r3, r3, #3
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	7a1b      	ldrb	r3, [r3, #8]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d066      	beq.n	80004ae <Adc_Init+0x102>
 80003e0:	7bfa      	ldrb	r2, [r7, #15]
 80003e2:	4613      	mov	r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4413      	add	r3, r2
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	461a      	mov	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	7a1b      	ldrb	r3, [r3, #8]
 80003f2:	2b10      	cmp	r3, #16
 80003f4:	d85b      	bhi.n	80004ae <Adc_Init+0x102>
            ConfigPtr[i].Channels == NULL || ConfigPtr[i].ResultBuffer == NULL ||
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	4613      	mov	r3, r2
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	4413      	add	r3, r2
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	685b      	ldr	r3, [r3, #4]
        if (ConfigPtr[i].NumChannels == 0 || ConfigPtr[i].NumChannels > 16 ||
 8000408:	2b00      	cmp	r3, #0
 800040a:	d050      	beq.n	80004ae <Adc_Init+0x102>
            ConfigPtr[i].Channels == NULL || ConfigPtr[i].ResultBuffer == NULL ||
 800040c:	7bfa      	ldrb	r2, [r7, #15]
 800040e:	4613      	mov	r3, r2
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4413      	add	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d045      	beq.n	80004ae <Adc_Init+0x102>
            Adc_GetHwUnit(ConfigPtr[i].HwUnit) == NULL ||
 8000422:	7bfa      	ldrb	r2, [r7, #15]
 8000424:	4613      	mov	r3, r2
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	4413      	add	r3, r2
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	461a      	mov	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fecb 	bl	80001d0 <Adc_GetHwUnit>
 800043a:	4603      	mov	r3, r0
            ConfigPtr[i].Channels == NULL || ConfigPtr[i].ResultBuffer == NULL ||
 800043c:	2b00      	cmp	r3, #0
 800043e:	d036      	beq.n	80004ae <Adc_Init+0x102>
            ConfigPtr[i].AccessMode > ADC_ACCESS_MODE_STREAMING ||
 8000440:	7bfa      	ldrb	r2, [r7, #15]
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	461a      	mov	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4413      	add	r3, r2
 8000450:	7a5b      	ldrb	r3, [r3, #9]
            Adc_GetHwUnit(ConfigPtr[i].HwUnit) == NULL ||
 8000452:	2b01      	cmp	r3, #1
 8000454:	d82b      	bhi.n	80004ae <Adc_Init+0x102>
            ConfigPtr[i].ConvMode > ADC_CONV_MODE_CONTINUOUS ||
 8000456:	7bfa      	ldrb	r2, [r7, #15]
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	7a9b      	ldrb	r3, [r3, #10]
            ConfigPtr[i].AccessMode > ADC_ACCESS_MODE_STREAMING ||
 8000468:	2b01      	cmp	r3, #1
 800046a:	d820      	bhi.n	80004ae <Adc_Init+0x102>
            ConfigPtr[i].TriggerSource > ADC_TRIG_SRC_TIM2 ||
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	4613      	mov	r3, r2
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	4413      	add	r3, r2
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	461a      	mov	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	7adb      	ldrb	r3, [r3, #11]
            ConfigPtr[i].ConvMode > ADC_CONV_MODE_CONTINUOUS ||
 800047e:	2b01      	cmp	r3, #1
 8000480:	d815      	bhi.n	80004ae <Adc_Init+0x102>
            (ConfigPtr[i].AccessMode == ADC_ACCESS_MODE_STREAMING && ConfigPtr[i].StreamNumSamples == 0)) {
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4613      	mov	r3, r2
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	4413      	add	r3, r2
 800048a:	00db      	lsls	r3, r3, #3
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	7a5b      	ldrb	r3, [r3, #9]
            ConfigPtr[i].TriggerSource > ADC_TRIG_SRC_TIM2 ||
 8000494:	2b01      	cmp	r3, #1
 8000496:	d10c      	bne.n	80004b2 <Adc_Init+0x106>
            (ConfigPtr[i].AccessMode == ADC_ACCESS_MODE_STREAMING && ConfigPtr[i].StreamNumSamples == 0)) {
 8000498:	7bfa      	ldrb	r2, [r7, #15]
 800049a:	4613      	mov	r3, r2
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4413      	add	r3, r2
 80004a0:	00db      	lsls	r3, r3, #3
 80004a2:	461a      	mov	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	7c1b      	ldrb	r3, [r3, #16]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d101      	bne.n	80004b2 <Adc_Init+0x106>
            return E_NOT_OK;
 80004ae:	2301      	movs	r3, #1
 80004b0:	e158      	b.n	8000764 <Adc_Init+0x3b8>
        }

        /* Kiểm tra trùng lặp kênh */
        for (uint8 j = 0; j < ConfigPtr[i].NumChannels; j++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]
 80004b6:	e031      	b.n	800051c <Adc_Init+0x170>
            for (uint8 k = j + 1; k < ConfigPtr[i].NumChannels; k++) {
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3301      	adds	r3, #1
 80004bc:	737b      	strb	r3, [r7, #13]
 80004be:	e01e      	b.n	80004fe <Adc_Init+0x152>
                if (ConfigPtr[i].Channels[j] == ConfigPtr[i].Channels[k]) {
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	4613      	mov	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	4413      	add	r3, r2
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	461a      	mov	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4413      	add	r3, r2
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	4413      	add	r3, r2
 80004d6:	7819      	ldrb	r1, [r3, #0]
 80004d8:	7bfa      	ldrb	r2, [r7, #15]
 80004da:	4613      	mov	r3, r2
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	4413      	add	r3, r2
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	7b7b      	ldrb	r3, [r7, #13]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d101      	bne.n	80004f8 <Adc_Init+0x14c>
                    return E_NOT_OK; /* Kênh trùng lặp */
 80004f4:	2301      	movs	r3, #1
 80004f6:	e135      	b.n	8000764 <Adc_Init+0x3b8>
            for (uint8 k = j + 1; k < ConfigPtr[i].NumChannels; k++) {
 80004f8:	7b7b      	ldrb	r3, [r7, #13]
 80004fa:	3301      	adds	r3, #1
 80004fc:	737b      	strb	r3, [r7, #13]
 80004fe:	7bfa      	ldrb	r2, [r7, #15]
 8000500:	4613      	mov	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	7a1b      	ldrb	r3, [r3, #8]
 8000510:	7b7a      	ldrb	r2, [r7, #13]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3d4      	bcc.n	80004c0 <Adc_Init+0x114>
        for (uint8 j = 0; j < ConfigPtr[i].NumChannels; j++) {
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	3301      	adds	r3, #1
 800051a:	73bb      	strb	r3, [r7, #14]
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	4613      	mov	r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4413      	add	r3, r2
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	461a      	mov	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	7a1b      	ldrb	r3, [r3, #8]
 800052e:	7bba      	ldrb	r2, [r7, #14]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3c1      	bcc.n	80004b8 <Adc_Init+0x10c>
                }
            }
        }

        AdcGroupStatus[i] = ADC_IDLE;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	4a49      	ldr	r2, [pc, #292]	@ (800065c <Adc_Init+0x2b0>)
 8000538:	2100      	movs	r1, #0
 800053a:	54d1      	strb	r1, [r2, r3]
        AdcResultBuffer[i] = NULL;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	4a48      	ldr	r2, [pc, #288]	@ (8000660 <Adc_Init+0x2b4>)
 8000540:	2100      	movs	r1, #0
 8000542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        AdcStreamSampleCount[i] = 0;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	4a46      	ldr	r2, [pc, #280]	@ (8000664 <Adc_Init+0x2b8>)
 800054a:	2100      	movs	r1, #0
 800054c:	54d1      	strb	r1, [r2, r3]

        /* Kích hoạt clock và cấu hình ADC */
        Adc_EnableClock(ConfigPtr[i].HwUnit);
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	4613      	mov	r3, r2
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	4413      	add	r3, r2
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe4f 	bl	8000204 <Adc_EnableClock>
        ADC_TypeDef* adc = Adc_GetHwUnit(ConfigPtr[i].HwUnit);
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fe29 	bl	80001d0 <Adc_GetHwUnit>
 800057e:	60b8      	str	r0, [r7, #8]

        /* Cấu hình ADC: 12-bit resolution */
        adc->CR1 = 0; /* Reset CR1 */
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
        adc->CR1 |= (0 << 8); /* RES = 00: 12-bit */
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	685a      	ldr	r2, [r3, #4]
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	605a      	str	r2, [r3, #4]
        if (ConfigPtr[i].NumChannels > 1) {
 800058e:	7bfa      	ldrb	r2, [r7, #15]
 8000590:	4613      	mov	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	7a1b      	ldrb	r3, [r3, #8]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d910      	bls.n	80005c6 <Adc_Init+0x21a>
            adc->CR1 |= (1 << 8); /* SCAN = 1: Bật scan mode */
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	605a      	str	r2, [r3, #4]
            adc->CR2 |= (1 << 10); /* DMA = 1: Bật DMA */
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	609a      	str	r2, [r3, #8]
            Adc_ConfigureDma(i, adc); /* Cấu hình DMA cho scan mode */
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	68b9      	ldr	r1, [r7, #8]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe91 	bl	80002e8 <Adc_ConfigureDma>
        }
        adc->CR2 = 0; /* Reset CR2 */
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
        adc->CR2 |= (1 << 1); /* ADON = 1: Bật ADC */
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f043 0202 	orr.w	r2, r3, #2
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	609a      	str	r2, [r3, #8]
        if (ConfigPtr[i].ConvMode == ADC_CONV_MODE_CONTINUOUS) {
 80005d8:	7bfa      	ldrb	r2, [r7, #15]
 80005da:	4613      	mov	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	7a9b      	ldrb	r3, [r3, #10]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d105      	bne.n	80005fa <Adc_Init+0x24e>
            adc->CR2 |= (1 << 0); /* CONT = 1: Continuous mode */
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f043 0201 	orr.w	r2, r3, #1
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	609a      	str	r2, [r3, #8]
        }
        if (ConfigPtr[i].TriggerSource == ADC_TRIG_SRC_TIM2) {
 80005fa:	7bfa      	ldrb	r2, [r7, #15]
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	7adb      	ldrb	r3, [r3, #11]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d120      	bne.n	8000652 <Adc_Init+0x2a6>
            adc->CR2 |= (1 << 8); /* EXTEN = 01: Rising edge trigger */
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	609a      	str	r2, [r3, #8]
            adc->CR2 |= (0x7 << 24); /* EXTSEL = 0111: TIM2 TRGO */
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f043 62e0 	orr.w	r2, r3, #117440512	@ 0x7000000
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	609a      	str	r2, [r3, #8]
            Adc_ConfigureTimer2(ConfigPtr[i].TimerPsc, ConfigPtr[i].TimerArr);
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	8a58      	ldrh	r0, [r3, #18]
 800063a:	7bfa      	ldrb	r2, [r7, #15]
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	8a9b      	ldrh	r3, [r3, #20]
 800064c:	4619      	mov	r1, r3
 800064e:	f7ff fe19 	bl	8000284 <Adc_ConfigureTimer2>
        }

        /* Cấu hình kênh cho nhóm */
        for (uint8 j = 0; j < ConfigPtr[i].NumChannels; j++) {
 8000652:	2300      	movs	r3, #0
 8000654:	733b      	strb	r3, [r7, #12]
 8000656:	e060      	b.n	800071a <Adc_Init+0x36e>
 8000658:	20000034 	.word	0x20000034
 800065c:	20000038 	.word	0x20000038
 8000660:	2000003c 	.word	0x2000003c
 8000664:	20000048 	.word	0x20000048
            if (j < 6) {
 8000668:	7b3b      	ldrb	r3, [r7, #12]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d819      	bhi.n	80006a2 <Adc_Init+0x2f6>
                adc->SQR3 |= (ConfigPtr[i].Channels[j] << (j * 5)); /* Kênh 0-5 trong SQR3 */
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	7b3b      	ldrb	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	7b3a      	ldrb	r2, [r7, #12]
 800068e:	4613      	mov	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	fa00 f303 	lsl.w	r3, r0, r3
 8000698:	ea41 0203 	orr.w	r2, r1, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a0:	e038      	b.n	8000714 <Adc_Init+0x368>
            } else if (j < 12) {
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	2b0b      	cmp	r3, #11
 80006a6:	d81a      	bhi.n	80006de <Adc_Init+0x332>
                adc->SQR2 |= (ConfigPtr[i].Channels[j] << ((j - 6) * 5)); /* Kênh 6-11 trong SQR2 */
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80006ac:	7bfa      	ldrb	r2, [r7, #15]
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	7b3b      	ldrb	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	7b3b      	ldrb	r3, [r7, #12]
 80006c8:	1f9a      	subs	r2, r3, #6
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	fa00 f303 	lsl.w	r3, r0, r3
 80006d4:	ea41 0203 	orr.w	r2, r1, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	631a      	str	r2, [r3, #48]	@ 0x30
 80006dc:	e01a      	b.n	8000714 <Adc_Init+0x368>
            } else {
                adc->SQR1 |= (ConfigPtr[i].Channels[j] << ((j - 12) * 5)); /* Kênh 12-15 trong SQR1 */
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	685a      	ldr	r2, [r3, #4]
 80006f4:	7b3b      	ldrb	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	f1a3 020c 	sub.w	r2, r3, #12
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	fa00 f303 	lsl.w	r3, r0, r3
 800070c:	ea41 0203 	orr.w	r2, r1, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
        for (uint8 j = 0; j < ConfigPtr[i].NumChannels; j++) {
 8000714:	7b3b      	ldrb	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	733b      	strb	r3, [r7, #12]
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	7a1b      	ldrb	r3, [r3, #8]
 800072c:	7b3a      	ldrb	r2, [r7, #12]
 800072e:	429a      	cmp	r2, r3
 8000730:	d39a      	bcc.n	8000668 <Adc_Init+0x2bc>
            }
        }
        adc->SQR1 |= ((ConfigPtr[i].NumChannels - 1) << 20); /* Đặt số lượng kênh */
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000736:	7bfa      	ldrb	r2, [r7, #15]
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	7a1b      	ldrb	r3, [r3, #8]
 8000748:	3b01      	subs	r3, #1
 800074a:	051b      	lsls	r3, r3, #20
 800074c:	ea41 0203 	orr.w	r2, r1, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (uint8 i = 0; i < ADC_GROUP_COUNT; i++) {
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	3301      	adds	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	2b02      	cmp	r3, #2
 800075e:	f67f ae34 	bls.w	80003ca <Adc_Init+0x1e>
    }
    return E_OK;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <Adc_SetupResultBuffer>:
 * @brief Sets up the result buffer for a specific ADC group.
 * @param Group Group identifier (ADC_GROUP_0 to ADC_GROUP_2).
 * @param DataBufferPtr Pointer to the result buffer.
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group, Adc_ValueGroupType* DataBufferPtr) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
    if (Group >= ADC_GROUP_COUNT || DataBufferPtr == NULL || AdcConfigPtr == NULL) {
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d806      	bhi.n	800078c <Adc_SetupResultBuffer+0x20>
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d003      	beq.n	800078c <Adc_SetupResultBuffer+0x20>
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <Adc_SetupResultBuffer+0x4c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d101      	bne.n	8000790 <Adc_SetupResultBuffer+0x24>
        return E_NOT_OK;
 800078c:	2301      	movs	r3, #1
 800078e:	e00d      	b.n	80007ac <Adc_SetupResultBuffer+0x40>
    }
    if (AdcResultBuffer[Group] != NULL) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <Adc_SetupResultBuffer+0x50>)
 8000794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <Adc_SetupResultBuffer+0x34>
        return E_NOT_OK; /* Bộ đệm đã được thiết lập */
 800079c:	2301      	movs	r3, #1
 800079e:	e005      	b.n	80007ac <Adc_SetupResultBuffer+0x40>
    }
    AdcResultBuffer[Group] = DataBufferPtr;
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4906      	ldr	r1, [pc, #24]	@ (80007bc <Adc_SetupResultBuffer+0x50>)
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return E_OK;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	20000034 	.word	0x20000034
 80007bc:	2000003c 	.word	0x2000003c

080007c0 <Adc_StartGroupConversion>:
/**
 * @brief Starts conversion for a specific ADC group (software trigger only).
 * @param Group Group identifier (ADC_GROUP_0 to ADC_GROUP_2).
 * @return None
 */
void Adc_StartGroupConversion(Adc_GroupType Group) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
    if (Group >= ADC_GROUP_COUNT || AdcConfigPtr == NULL) return;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d832      	bhi.n	8000836 <Adc_StartGroupConversion+0x76>
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <Adc_StartGroupConversion+0x84>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d02e      	beq.n	8000836 <Adc_StartGroupConversion+0x76>

    ADC_TypeDef* adc = Adc_GetHwUnit(AdcConfigPtr[Group].HwUnit);
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <Adc_StartGroupConversion+0x84>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fcf0 	bl	80001d0 <Adc_GetHwUnit>
 80007f0:	60f8      	str	r0, [r7, #12]
    if (adc == NULL || AdcGroupStatus[Group] != ADC_IDLE || AdcConfigPtr[Group].TriggerSource != ADC_TRIG_SRC_SW) return;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d020      	beq.n	800083a <Adc_StartGroupConversion+0x7a>
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <Adc_StartGroupConversion+0x88>)
 80007fc:	5cd3      	ldrb	r3, [r2, r3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d11b      	bne.n	800083a <Adc_StartGroupConversion+0x7a>
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <Adc_StartGroupConversion+0x84>)
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	7adb      	ldrb	r3, [r3, #11]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d110      	bne.n	800083a <Adc_StartGroupConversion+0x7a>

    AdcGroupStatus[Group] = ADC_BUSY;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a0b      	ldr	r2, [pc, #44]	@ (8000848 <Adc_StartGroupConversion+0x88>)
 800081c:	2101      	movs	r1, #1
 800081e:	54d1      	strb	r1, [r2, r3]
    AdcStreamSampleCount[Group] = 0;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <Adc_StartGroupConversion+0x8c>)
 8000824:	2100      	movs	r1, #0
 8000826:	54d1      	strb	r1, [r2, r3]
    adc->CR2 |= (1 << 30); /* SWSTART: Bắt đầu chuyển đổi */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	e002      	b.n	800083c <Adc_StartGroupConversion+0x7c>
    if (Group >= ADC_GROUP_COUNT || AdcConfigPtr == NULL) return;
 8000836:	bf00      	nop
 8000838:	e000      	b.n	800083c <Adc_StartGroupConversion+0x7c>
    if (adc == NULL || AdcGroupStatus[Group] != ADC_IDLE || AdcConfigPtr[Group].TriggerSource != ADC_TRIG_SRC_SW) return;
 800083a:	bf00      	nop
}
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000034 	.word	0x20000034
 8000848:	20000038 	.word	0x20000038
 800084c:	20000048 	.word	0x20000048

08000850 <Adc_ReadGroup>:
 * @brief Reads the conversion result for a specific ADC group.
 * @param Group Group identifier (ADC_GROUP_0 to ADC_GROUP_2).
 * @param DataBufferPtr Pointer to the buffer to store results.
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group, Adc_ValueGroupType* DataBufferPtr) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
    if (Group >= ADC_GROUP_COUNT || AdcConfigPtr == NULL || DataBufferPtr == NULL) return E_NOT_OK;
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d806      	bhi.n	8000870 <Adc_ReadGroup+0x20>
 8000862:	4b5a      	ldr	r3, [pc, #360]	@ (80009cc <Adc_ReadGroup+0x17c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <Adc_ReadGroup+0x20>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <Adc_ReadGroup+0x24>
 8000870:	2301      	movs	r3, #1
 8000872:	e0a6      	b.n	80009c2 <Adc_ReadGroup+0x172>

    ADC_TypeDef* adc = Adc_GetHwUnit(AdcConfigPtr[Group].HwUnit);
 8000874:	4b55      	ldr	r3, [pc, #340]	@ (80009cc <Adc_ReadGroup+0x17c>)
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	440b      	add	r3, r1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fca2 	bl	80001d0 <Adc_GetHwUnit>
 800088c:	60b8      	str	r0, [r7, #8]
    if (adc == NULL || AdcGroupStatus[Group] != ADC_COMPLETED) return E_NOT_OK;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <Adc_ReadGroup+0x4e>
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4a4e      	ldr	r2, [pc, #312]	@ (80009d0 <Adc_ReadGroup+0x180>)
 8000898:	5cd3      	ldrb	r3, [r2, r3]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d001      	beq.n	80008a2 <Adc_ReadGroup+0x52>
 800089e:	2301      	movs	r3, #1
 80008a0:	e08f      	b.n	80009c2 <Adc_ReadGroup+0x172>

    if (AdcConfigPtr[Group].NumChannels == 1 || AdcConfigPtr[Group].AccessMode != ADC_ACCESS_MODE_STREAMING) {
 80008a2:	4b4a      	ldr	r3, [pc, #296]	@ (80009cc <Adc_ReadGroup+0x17c>)
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	440b      	add	r3, r1
 80008b2:	7a1b      	ldrb	r3, [r3, #8]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d00a      	beq.n	80008ce <Adc_ReadGroup+0x7e>
 80008b8:	4b44      	ldr	r3, [pc, #272]	@ (80009cc <Adc_ReadGroup+0x17c>)
 80008ba:	6819      	ldr	r1, [r3, #0]
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	7a5b      	ldrb	r3, [r3, #9]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d01a      	beq.n	8000904 <Adc_ReadGroup+0xb4>
        for (uint8 i = 0; i < AdcConfigPtr[Group].NumChannels; i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	e00a      	b.n	80008ea <Adc_ReadGroup+0x9a>
            DataBufferPtr[i] = adc->DR; /* Đọc dữ liệu từ DR */
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	b28a      	uxth	r2, r1
 80008e2:	801a      	strh	r2, [r3, #0]
        for (uint8 i = 0; i < AdcConfigPtr[Group].NumChannels; i++) {
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3301      	adds	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	4b38      	ldr	r3, [pc, #224]	@ (80009cc <Adc_ReadGroup+0x17c>)
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	7a1b      	ldrb	r3, [r3, #8]
 80008fc:	7bfa      	ldrb	r2, [r7, #15]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3e8      	bcc.n	80008d4 <Adc_ReadGroup+0x84>
 8000902:	e01e      	b.n	8000942 <Adc_ReadGroup+0xf2>
        }
    } else {
        /* Dữ liệu đã được DMA truyền vào AdcResultBuffer */
        for (uint8 i = 0; i < AdcConfigPtr[Group].NumChannels; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	73bb      	strb	r3, [r7, #14]
 8000908:	e00f      	b.n	800092a <Adc_ReadGroup+0xda>
            DataBufferPtr[i] = AdcResultBuffer[Group][i];
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4a31      	ldr	r2, [pc, #196]	@ (80009d4 <Adc_ReadGroup+0x184>)
 800090e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	441a      	add	r2, r3
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	6839      	ldr	r1, [r7, #0]
 800091e:	440b      	add	r3, r1
 8000920:	8812      	ldrh	r2, [r2, #0]
 8000922:	801a      	strh	r2, [r3, #0]
        for (uint8 i = 0; i < AdcConfigPtr[Group].NumChannels; i++) {
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	3301      	adds	r3, #1
 8000928:	73bb      	strb	r3, [r7, #14]
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <Adc_ReadGroup+0x17c>)
 800092c:	6819      	ldr	r1, [r3, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	440b      	add	r3, r1
 800093a:	7a1b      	ldrb	r3, [r3, #8]
 800093c:	7bba      	ldrb	r2, [r7, #14]
 800093e:	429a      	cmp	r2, r3
 8000940:	d3e3      	bcc.n	800090a <Adc_ReadGroup+0xba>
        }
    }

    AdcStreamSampleCount[Group]++;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a24      	ldr	r2, [pc, #144]	@ (80009d8 <Adc_ReadGroup+0x188>)
 8000946:	5cd2      	ldrb	r2, [r2, r3]
 8000948:	3201      	adds	r2, #1
 800094a:	b2d1      	uxtb	r1, r2
 800094c:	4a22      	ldr	r2, [pc, #136]	@ (80009d8 <Adc_ReadGroup+0x188>)
 800094e:	54d1      	strb	r1, [r2, r3]
    if (AdcConfigPtr[Group].AccessMode == ADC_ACCESS_MODE_STREAMING &&
 8000950:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <Adc_ReadGroup+0x17c>)
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	440b      	add	r3, r1
 8000960:	7a5b      	ldrb	r3, [r3, #9]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d112      	bne.n	800098c <Adc_ReadGroup+0x13c>
        AdcStreamSampleCount[Group] >= AdcConfigPtr[Group].StreamNumSamples) {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <Adc_ReadGroup+0x188>)
 800096a:	5cd1      	ldrb	r1, [r2, r3]
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <Adc_ReadGroup+0x17c>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4403      	add	r3, r0
 800097c:	7c1b      	ldrb	r3, [r3, #16]
    if (AdcConfigPtr[Group].AccessMode == ADC_ACCESS_MODE_STREAMING &&
 800097e:	4299      	cmp	r1, r3
 8000980:	d304      	bcc.n	800098c <Adc_ReadGroup+0x13c>
        AdcGroupStatus[Group] = ADC_STREAM_COMPLETED;
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <Adc_ReadGroup+0x180>)
 8000986:	2103      	movs	r1, #3
 8000988:	54d1      	strb	r1, [r2, r3]
 800098a:	e019      	b.n	80009c0 <Adc_ReadGroup+0x170>
    } else if (AdcConfigPtr[Group].ConvMode != ADC_CONV_MODE_CONTINUOUS &&
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <Adc_ReadGroup+0x17c>)
 800098e:	6819      	ldr	r1, [r3, #0]
 8000990:	79fa      	ldrb	r2, [r7, #7]
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	7a9b      	ldrb	r3, [r3, #10]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d00e      	beq.n	80009c0 <Adc_ReadGroup+0x170>
               AdcConfigPtr[Group].TriggerSource != ADC_TRIG_SRC_TIM2) {
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <Adc_ReadGroup+0x17c>)
 80009a4:	6819      	ldr	r1, [r3, #0]
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	7adb      	ldrb	r3, [r3, #11]
    } else if (AdcConfigPtr[Group].ConvMode != ADC_CONV_MODE_CONTINUOUS &&
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d003      	beq.n	80009c0 <Adc_ReadGroup+0x170>
        AdcGroupStatus[Group] = ADC_IDLE;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <Adc_ReadGroup+0x180>)
 80009bc:	2100      	movs	r1, #0
 80009be:	54d1      	strb	r1, [r2, r3]
    }
    return E_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000034 	.word	0x20000034
 80009d0:	20000038 	.word	0x20000038
 80009d4:	2000003c 	.word	0x2000003c
 80009d8:	20000048 	.word	0x20000048

080009dc <Adc_GetGroupStatus>:
/**
 * @brief Gets the status of a specific ADC group.
 * @param Group Group identifier (ADC_GROUP_0 to ADC_GROUP_2).
 * @return Adc_StatusType Current status of the group.
 */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
    if (Group >= ADC_GROUP_COUNT || AdcConfigPtr == NULL) return ADC_IDLE;
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d803      	bhi.n	80009f4 <Adc_GetGroupStatus+0x18>
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <Adc_GetGroupStatus+0x8c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <Adc_GetGroupStatus+0x1c>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e033      	b.n	8000a60 <Adc_GetGroupStatus+0x84>

    ADC_TypeDef* adc = Adc_GetHwUnit(AdcConfigPtr[Group].HwUnit);
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <Adc_GetGroupStatus+0x8c>)
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	440b      	add	r3, r1
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fbe0 	bl	80001d0 <Adc_GetHwUnit>
 8000a10:	60f8      	str	r0, [r7, #12]
    if (adc == NULL) return ADC_IDLE;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d101      	bne.n	8000a1c <Adc_GetGroupStatus+0x40>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e021      	b.n	8000a60 <Adc_GetGroupStatus+0x84>

    if (AdcGroupStatus[Group] == ADC_BUSY) {
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <Adc_GetGroupStatus+0x90>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d119      	bne.n	8000a5a <Adc_GetGroupStatus+0x7e>
        if (adc->SR & (1 << 5)) { /* OVR: Overrun */
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d009      	beq.n	8000a46 <Adc_GetGroupStatus+0x6a>
            AdcGroupStatus[Group] = ADC_IDLE;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <Adc_GetGroupStatus+0x90>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	54d1      	strb	r1, [r2, r3]
            AdcStreamSampleCount[Group] = 0;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <Adc_GetGroupStatus+0x94>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	54d1      	strb	r1, [r2, r3]
            return ADC_IDLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e00c      	b.n	8000a60 <Adc_GetGroupStatus+0x84>
        }
        if (adc->SR & (1 << 4)) { /* EOC: End of Conversion */
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <Adc_GetGroupStatus+0x7e>
            AdcGroupStatus[Group] = ADC_COMPLETED;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <Adc_GetGroupStatus+0x90>)
 8000a56:	2102      	movs	r1, #2
 8000a58:	54d1      	strb	r1, [r2, r3]
        }
    }
    return AdcGroupStatus[Group];
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <Adc_GetGroupStatus+0x90>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000034 	.word	0x20000034
 8000a6c:	20000038 	.word	0x20000038
 8000a70:	20000048 	.word	0x20000048

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <Can_GetHwUnit>:
static const Can_ConfigType* CanConfigPtr = NULL;
static Can_StatusType CanStatus[CAN_HW_UNIT_COUNT] = {CAN_IDLE};
static Can_PduType CanRxPdu[CAN_HW_UNIT_COUNT];

/* Hàm hỗ trợ: Lấy con trỏ CAN từ HwUnit */
static CAN_TypeDef* Can_GetHwUnit(Can_HwUnitType HwUnit) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
    if (HwUnit == CAN_HW_UNIT_1) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d101      	bne.n	8000ac4 <Can_GetHwUnit+0x14>
        return CAN1;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <Can_GetHwUnit+0x24>)
 8000ac2:	e000      	b.n	8000ac6 <Can_GetHwUnit+0x16>
    }
    return NULL;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40006400 	.word	0x40006400

08000ad8 <Can_EnableClock>:

/* Hàm hỗ trợ: Kích hoạt clock cho CAN */
static void Can_EnableClock(Can_HwUnitType HwUnit) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
    if (HwUnit == CAN_HW_UNIT_1) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <Can_EnableClock+0x1c>
        RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <Can_EnableClock+0x28>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <Can_EnableClock+0x28>)
 8000aee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	.word	0x40023800

08000b04 <Can_ConfigureGpio>:

/* Hàm hỗ trợ: Cấu hình GPIO cho CAN */
static void Can_ConfigureGpio(Can_HwUnitType HwUnit) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
    if (HwUnit == CAN_HW_UNIT_1) {
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d11d      	bne.n	8000b50 <Can_ConfigureGpio+0x4c>
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <Can_ConfigureGpio+0x58>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <Can_ConfigureGpio+0x58>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	@ 0x30
        GPIOB->MODER &= ~(0xF << (8 * 2)); /* PB8, PB9 */
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b26:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000b2a:	6013      	str	r3, [r2, #0]
        GPIOB->MODER |= (0xA << (8 * 2)); /* AF mode */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b32:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000b36:	6013      	str	r3, [r2, #0]
        GPIOB->AFR[1] &= ~(0xFF << ((8 - 8) * 4)); /* AF9 cho PB8, PB9 */
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b42:	6253      	str	r3, [r2, #36]	@ 0x24
        GPIOB->AFR[1] |= (0x99 << ((8 - 8) * 4));
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b48:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <Can_ConfigureGpio+0x5c>)
 8000b4a:	f043 0399 	orr.w	r3, r3, #153	@ 0x99
 8000b4e:	6253      	str	r3, [r2, #36]	@ 0x24
    }
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400

08000b64 <Can_Init>:

/* Khởi tạo CAN */
void Can_Init(const Can_ConfigType* ConfigPtr) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    if (ConfigPtr == NULL) return;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80d9 	beq.w	8000d26 <Can_Init+0x1c2>

    CanConfigPtr = ConfigPtr;
 8000b74:	4a6e      	ldr	r2, [pc, #440]	@ (8000d30 <Can_Init+0x1cc>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]

    for (uint8 i = 0; i < CAN_HW_UNIT_COUNT; i++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	75fb      	strb	r3, [r7, #23]
 8000b7e:	e0cd      	b.n	8000d1c <Can_Init+0x1b8>
        CanStatus[i] = CAN_IDLE;
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	4a6c      	ldr	r2, [pc, #432]	@ (8000d34 <Can_Init+0x1d0>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	54d1      	strb	r1, [r2, r3]

        /* Kích hoạt clock và cấu hình GPIO */
        Can_EnableClock(ConfigPtr[i].HwUnit);
 8000b88:	7dfa      	ldrb	r2, [r7, #23]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	461a      	mov	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff9c 	bl	8000ad8 <Can_EnableClock>
        Can_ConfigureGpio(ConfigPtr[i].HwUnit);
 8000ba0:	7dfa      	ldrb	r2, [r7, #23]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffa6 	bl	8000b04 <Can_ConfigureGpio>

        CAN_TypeDef* can = Can_GetHwUnit(ConfigPtr[i].HwUnit);
 8000bb8:	7dfa      	ldrb	r2, [r7, #23]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff70 	bl	8000ab0 <Can_GetHwUnit>
 8000bd0:	6138      	str	r0, [r7, #16]
        if (can == NULL) continue;
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f000 809d 	beq.w	8000d14 <Can_Init+0x1b0>

        /* Thoát sleep mode và vào initialization mode */
        can->MCR &= ~(CAN_MCR_SLEEP); /* Exit sleep mode */
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f023 0202 	bic.w	r2, r3, #2
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	601a      	str	r2, [r3, #0]
        can->MCR |= CAN_MCR_INRQ; /* Request initialization */
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f043 0201 	orr.w	r2, r3, #1
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	601a      	str	r2, [r3, #0]
        while (!(can->MSR & CAN_MSR_INAK)) {} /* Chờ INAK = 1 */
 8000bf2:	bf00      	nop
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f9      	beq.n	8000bf4 <Can_Init+0x90>

        /* Cấu hình baud rate: f_APB1 = 16 MHz */
        uint32 prescaler = 16000000UL / (ConfigPtr[i].Baudrate * 8); /* TQ = 8 */
 8000c00:	7dfa      	ldrb	r2, [r7, #23]
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4a48      	ldr	r2, [pc, #288]	@ (8000d38 <Can_Init+0x1d4>)
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	60fb      	str	r3, [r7, #12]
        can->BTR = (1 << 24) | (5 << 20) | (1 << 16) | (prescaler - 1); /* BS1=5, BS2=1 */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f043 73a8 	orr.w	r3, r3, #22020096	@ 0x1500000
 8000c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	61d3      	str	r3, [r2, #28]

        /* Cấu hình bộ lọc: Nhận message với ID = FilterId */
        can->FMR |= CAN_FMR_FINIT; /* Initialization mode cho bộ lọc */
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c32:	f043 0201 	orr.w	r2, r3, #1
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        can->FA1R &= ~(1 << 0); /* Tắt filter 0 */
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000c42:	f023 0201 	bic.w	r2, r3, #1
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        can->FS1R |= (1 << 0); /* Filter 0: 32-bit */
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000c52:	f043 0201 	orr.w	r2, r3, #1
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
        if (ConfigPtr[i].IdType == CAN_ID_TYPE_STANDARD) {
 8000c5c:	7dfa      	ldrb	r2, [r7, #23]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	461a      	mov	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	7a1b      	ldrb	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10d      	bne.n	8000c8e <Can_Init+0x12a>
            can->sFilterRegister[0].FR1 = (ConfigPtr[i].FilterId << 21); /* Standard ID */
 8000c72:	7dfa      	ldrb	r2, [r7, #23]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	895b      	ldrh	r3, [r3, #10]
 8000c84:	055a      	lsls	r2, r3, #21
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
 8000c8c:	e00c      	b.n	8000ca8 <Can_Init+0x144>
        } else {
            can->sFilterRegister[0].FR1 = (ConfigPtr[i].FilterId << 3); /* Extended ID */
 8000c8e:	7dfa      	ldrb	r2, [r7, #23]
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	895b      	ldrh	r3, [r3, #10]
 8000ca0:	00da      	lsls	r2, r3, #3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
        }
        can->sFilterRegister[0].FR2 = 0; /* Mask = 0: Chỉ nhận đúng ID */
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
        can->FM1R &= ~(1 << 0); /* Identifier mode */
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000cb6:	f023 0201 	bic.w	r2, r3, #1
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
        can->FA1R |= (1 << 0); /* Kích hoạt filter 0 */
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000cc6:	f043 0201 	orr.w	r2, r3, #1
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        can->FMR &= ~(CAN_FMR_FINIT); /* Thoát initialization mode */
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cd6:	f023 0201 	bic.w	r2, r3, #1
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

        /* Thoát initialization mode và bật interrupt */
        can->MCR &= ~(CAN_MCR_INRQ); /* Normal mode */
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 0201 	bic.w	r2, r3, #1
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	601a      	str	r2, [r3, #0]
        while (can->MSR & CAN_MSR_INAK) {} /* Chờ INAK = 0 */
 8000cec:	bf00      	nop
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f9      	bne.n	8000cee <Can_Init+0x18a>
        can->IER |= CAN_IER_FMPIE0 | CAN_IER_TMEIE; /* Bật interrupt RX FIFO0 và TX */
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f043 0203 	orr.w	r2, r3, #3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	615a      	str	r2, [r3, #20]
        NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d06:	2014      	movs	r0, #20
 8000d08:	f7ff feb4 	bl	8000a74 <__NVIC_EnableIRQ>
        NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d0c:	2013      	movs	r0, #19
 8000d0e:	f7ff feb1 	bl	8000a74 <__NVIC_EnableIRQ>
 8000d12:	e000      	b.n	8000d16 <Can_Init+0x1b2>
        if (can == NULL) continue;
 8000d14:	bf00      	nop
    for (uint8 i = 0; i < CAN_HW_UNIT_COUNT; i++) {
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	75fb      	strb	r3, [r7, #23]
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f43f af2e 	beq.w	8000b80 <Can_Init+0x1c>
 8000d24:	e000      	b.n	8000d28 <Can_Init+0x1c4>
    if (ConfigPtr == NULL) return;
 8000d26:	bf00      	nop
    }
}
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000005c 	.word	0x2000005c
 8000d34:	20000060 	.word	0x20000060
 8000d38:	00f42400 	.word	0x00f42400

08000d3c <Can_Write>:

/* Gửi CAN message */
Std_ReturnType Can_Write(Can_HwUnitType HwUnit, const Can_PduType* PduInfo) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
    if (HwUnit >= CAN_HW_UNIT_COUNT || PduInfo == NULL || PduInfo->Dlc > 8) return E_NOT_OK;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d106      	bne.n	8000d5c <Can_Write+0x20>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <Can_Write+0x20>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d901      	bls.n	8000d60 <Can_Write+0x24>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e079      	b.n	8000e54 <Can_Write+0x118>
    if (CanStatus[HwUnit] != CAN_IDLE) return E_NOT_OK;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4a3e      	ldr	r2, [pc, #248]	@ (8000e5c <Can_Write+0x120>)
 8000d64:	5cd3      	ldrb	r3, [r2, r3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <Can_Write+0x32>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e072      	b.n	8000e54 <Can_Write+0x118>

    CAN_TypeDef* can = Can_GetHwUnit(HwUnit);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe9d 	bl	8000ab0 <Can_GetHwUnit>
 8000d76:	60f8      	str	r0, [r7, #12]
    if (can == NULL) return E_NOT_OK;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <Can_Write+0x46>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e068      	b.n	8000e54 <Can_Write+0x118>

    CanStatus[HwUnit] = CAN_BUSY;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4a35      	ldr	r2, [pc, #212]	@ (8000e5c <Can_Write+0x120>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	54d1      	strb	r1, [r2, r3]

    /* Chọn mailbox trống */
    if (can->TSR & CAN_TSR_TME0) {
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d059      	beq.n	8000e4a <Can_Write+0x10e>
        can->sTxMailBox[0].TIR = 0; /* Xóa TIR */
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        if (CanConfigPtr[HwUnit].IdType == CAN_ID_TYPE_STANDARD) {
 8000d9e:	4b30      	ldr	r3, [pc, #192]	@ (8000e60 <Can_Write+0x124>)
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	7a1b      	ldrb	r3, [r3, #8]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10a      	bne.n	8000dca <Can_Write+0x8e>
            can->sTxMailBox[0].TIR |= (PduInfo->Id << 21); /* Standard ID */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	055b      	lsls	r3, r3, #21
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 8000dc8:	e00b      	b.n	8000de2 <Can_Write+0xa6>
        } else {
            can->sTxMailBox[0].TIR |= (PduInfo->Id << 3) | (1 << 2); /* Extended ID */
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	f043 0204 	orr.w	r2, r3, #4
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        }
        can->sTxMailBox[0].TDTR = PduInfo->Dlc; /* DLC */
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        can->sTxMailBox[0].TDLR = (PduInfo->Data[3] << 24) | (PduInfo->Data[2] << 16) |
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	7a1b      	ldrb	r3, [r3, #8]
 8000df2:	061a      	lsls	r2, r3, #24
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	79db      	ldrb	r3, [r3, #7]
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	431a      	orrs	r2, r3
                                  (PduInfo->Data[1] << 8) | PduInfo->Data[0];
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	021b      	lsls	r3, r3, #8
        can->sTxMailBox[0].TDLR = (PduInfo->Data[3] << 24) | (PduInfo->Data[2] << 16) |
 8000e02:	4313      	orrs	r3, r2
                                  (PduInfo->Data[1] << 8) | PduInfo->Data[0];
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	7952      	ldrb	r2, [r2, #5]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	461a      	mov	r2, r3
        can->sTxMailBox[0].TDLR = (PduInfo->Data[3] << 24) | (PduInfo->Data[2] << 16) |
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        can->sTxMailBox[0].TDHR = (PduInfo->Data[7] << 24) | (PduInfo->Data[6] << 16) |
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	7b1b      	ldrb	r3, [r3, #12]
 8000e16:	061a      	lsls	r2, r3, #24
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	7adb      	ldrb	r3, [r3, #11]
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	431a      	orrs	r2, r3
                                  (PduInfo->Data[5] << 8) | PduInfo->Data[4];
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	7a9b      	ldrb	r3, [r3, #10]
 8000e24:	021b      	lsls	r3, r3, #8
        can->sTxMailBox[0].TDHR = (PduInfo->Data[7] << 24) | (PduInfo->Data[6] << 16) |
 8000e26:	4313      	orrs	r3, r2
                                  (PduInfo->Data[5] << 8) | PduInfo->Data[4];
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	7a52      	ldrb	r2, [r2, #9]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	461a      	mov	r2, r3
        can->sTxMailBox[0].TDHR = (PduInfo->Data[7] << 24) | (PduInfo->Data[6] << 16) |
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        can->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ; /* Yêu cầu gửi */
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8000e3c:	f043 0201 	orr.w	r2, r3, #1
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        return E_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e004      	b.n	8000e54 <Can_Write+0x118>
    }
    CanStatus[HwUnit] = CAN_IDLE;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a03      	ldr	r2, [pc, #12]	@ (8000e5c <Can_Write+0x120>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	54d1      	strb	r1, [r2, r3]
    return E_NOT_OK;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000060 	.word	0x20000060
 8000e60:	2000005c 	.word	0x2000005c

08000e64 <Can_Read>:

/* Đọc CAN message */
Std_ReturnType Can_Read(Can_HwUnitType HwUnit, Can_PduType* PduInfo) {
 8000e64:	b490      	push	{r4, r7}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
    if (HwUnit >= CAN_HW_UNIT_COUNT || PduInfo == NULL) return E_NOT_OK;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <Can_Read+0x18>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <Can_Read+0x1c>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e014      	b.n	8000eaa <Can_Read+0x46>
    if (CanStatus[HwUnit] != CAN_COMPLETED) return E_NOT_OK;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <Can_Read+0x50>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d001      	beq.n	8000e8e <Can_Read+0x2a>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00d      	b.n	8000eaa <Can_Read+0x46>

    *PduInfo = CanRxPdu[HwUnit];
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	6839      	ldr	r1, [r7, #0]
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <Can_Read+0x54>)
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	4413      	add	r3, r2
 8000e98:	460c      	mov	r4, r1
 8000e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    CanStatus[HwUnit] = CAN_IDLE;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <Can_Read+0x50>)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	54d1      	strb	r1, [r2, r3]
    return E_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc90      	pop	{r4, r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000060 	.word	0x20000060
 8000eb8:	20000064 	.word	0x20000064

08000ebc <Can_GetStatus>:

/* Lấy trạng thái CAN */
Can_StatusType Can_GetStatus(Can_HwUnitType HwUnit) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
    if (HwUnit >= CAN_HW_UNIT_COUNT) return CAN_IDLE;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <Can_GetStatus+0x14>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e002      	b.n	8000ed6 <Can_GetStatus+0x1a>
    return CanStatus[HwUnit];
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <Can_GetStatus+0x28>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000060 	.word	0x20000060

08000ee8 <CAN1_RX0_IRQHandler>:
    while (can->MSR & CAN_MSR_INAK) {} /* Chờ INAK = 0 */
    return E_OK;
}

/* Xử lý ngắt CAN RX */
void CAN1_RX0_IRQHandler(void) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
    CAN_TypeDef* can = CAN1;
 8000eee:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <CAN1_RX0_IRQHandler+0xe0>)
 8000ef0:	607b      	str	r3, [r7, #4]
    if (can->RF0R & CAN_RF0R_FMP0) { /* Có message trong FIFO0 */
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d05d      	beq.n	8000fba <CAN1_RX0_IRQHandler+0xd2>
        Can_PduType* pdu = &CanRxPdu[CAN_HW_UNIT_1];
 8000efe:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <CAN1_RX0_IRQHandler+0xe4>)
 8000f00:	603b      	str	r3, [r7, #0]
        if (can->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <CAN1_RX0_IRQHandler+0x36>
            pdu->Id = can->sFIFOMailBox[0].RIR >> 3; /* Extended ID */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e005      	b.n	8000f2a <CAN1_RX0_IRQHandler+0x42>
        } else {
            pdu->Id = can->sFIFOMailBox[0].RIR >> 21; /* Standard ID */
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8000f24:	0d5a      	lsrs	r2, r3, #21
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	601a      	str	r2, [r3, #0]
        }
        pdu->Dlc = can->sFIFOMailBox[0].RDTR & 0xF;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	711a      	strb	r2, [r3, #4]
        pdu->Data[0] = (can->sFIFOMailBox[0].RDLR >> 0) & 0xFF;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	715a      	strb	r2, [r3, #5]
        pdu->Data[1] = (can->sFIFOMailBox[0].RDLR >> 8) & 0xFF;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	719a      	strb	r2, [r3, #6]
        pdu->Data[2] = (can->sFIFOMailBox[0].RDLR >> 16) & 0xFF;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	71da      	strb	r2, [r3, #7]
        pdu->Data[3] = (can->sFIFOMailBox[0].RDLR >> 24) & 0xFF;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000f6a:	0e1b      	lsrs	r3, r3, #24
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	721a      	strb	r2, [r3, #8]
        pdu->Data[4] = (can->sFIFOMailBox[0].RDHR >> 0) & 0xFF;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	725a      	strb	r2, [r3, #9]
        pdu->Data[5] = (can->sFIFOMailBox[0].RDHR >> 8) & 0xFF;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	729a      	strb	r2, [r3, #10]
        pdu->Data[6] = (can->sFIFOMailBox[0].RDHR >> 16) & 0xFF;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	72da      	strb	r2, [r3, #11]
        pdu->Data[7] = (can->sFIFOMailBox[0].RDHR >> 24) & 0xFF;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8000fa0:	0e1b      	lsrs	r3, r3, #24
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	731a      	strb	r2, [r3, #12]
        CanStatus[CAN_HW_UNIT_1] = CAN_COMPLETED;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <CAN1_RX0_IRQHandler+0xe8>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	705a      	strb	r2, [r3, #1]
        can->RF0R |= CAN_RF0R_RFOM0; /* Giải phóng FIFO0 */
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f043 0220 	orr.w	r2, r3, #32
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60da      	str	r2, [r3, #12]
    }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40006400 	.word	0x40006400
 8000fcc:	20000074 	.word	0x20000074
 8000fd0:	20000060 	.word	0x20000060

08000fd4 <CAN1_TX_IRQHandler>:

/* Xử lý ngắt CAN TX */
void CAN1_TX_IRQHandler(void) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
    CAN_TypeDef* can = CAN1;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <CAN1_TX_IRQHandler+0x34>)
 8000fdc:	607b      	str	r3, [r7, #4]
    if (can->TSR & CAN_TSR_RQCP0) { /* Mailbox 0 hoàn tất */
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <CAN1_TX_IRQHandler+0x28>
        can->TSR |= CAN_TSR_RQCP0; /* Xóa cờ */
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
        CanStatus[CAN_HW_UNIT_1] = CAN_COMPLETED;
 8000ff6:	4b05      	ldr	r3, [pc, #20]	@ (800100c <CAN1_TX_IRQHandler+0x38>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	705a      	strb	r2, [r3, #1]
    }
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40006400 	.word	0x40006400
 800100c:	20000060 	.word	0x20000060

08001010 <Dio_GetPort>:

/* Trạng thái kích hoạt clock */
static uint8 clockEnabled[9] = {0}; /* Hỗ trợ DIO_PORTA đến DIO_PORTI */

/* Hàm hỗ trợ: Lấy con trỏ GPIO từ PortId */
static GPIO_TypeDef* Dio_GetPort(Dio_PortType PortId) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    if (PortId >= DIO_PORTA && PortId <= DIO_PORTI) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <Dio_GetPort+0x1e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d804      	bhi.n	800102e <Dio_GetPort+0x1e>
        return portMap[PortId];
 8001024:	4a05      	ldr	r2, [pc, #20]	@ (800103c <Dio_GetPort+0x2c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	e000      	b.n	8001030 <Dio_GetPort+0x20>
    }
    return NULL;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	08003bbc 	.word	0x08003bbc

08001040 <Dio_EnableClock>:

/* Hàm hỗ trợ: Kích hoạt clock cho cổng */
static void Dio_EnableClock(Dio_PortType PortId) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    if (PortId >= DIO_PORTA && PortId <= DIO_PORTI && !clockEnabled[PortId - DIO_PORTA]) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d066      	beq.n	800111c <Dio_EnableClock+0xdc>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b09      	cmp	r3, #9
 8001052:	d863      	bhi.n	800111c <Dio_EnableClock+0xdc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	4a33      	ldr	r2, [pc, #204]	@ (8001128 <Dio_EnableClock+0xe8>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d15d      	bne.n	800111c <Dio_EnableClock+0xdc>
        clockEnabled[PortId - DIO_PORTA] = 1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	4a30      	ldr	r2, [pc, #192]	@ (8001128 <Dio_EnableClock+0xe8>)
 8001066:	2101      	movs	r1, #1
 8001068:	54d1      	strb	r1, [r2, r3]
        switch (PortId) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b08      	cmp	r3, #8
 8001070:	d853      	bhi.n	800111a <Dio_EnableClock+0xda>
 8001072:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <Dio_EnableClock+0x38>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	0800109d 	.word	0x0800109d
 800107c:	080010ab 	.word	0x080010ab
 8001080:	080010b9 	.word	0x080010b9
 8001084:	080010c7 	.word	0x080010c7
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010e3 	.word	0x080010e3
 8001090:	080010f1 	.word	0x080010f1
 8001094:	080010ff 	.word	0x080010ff
 8001098:	0800110d 	.word	0x0800110d
            case DIO_PORTA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 800109c:	4b23      	ldr	r3, [pc, #140]	@ (800112c <Dio_EnableClock+0xec>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a22      	ldr	r2, [pc, #136]	@ (800112c <Dio_EnableClock+0xec>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	e038      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <Dio_EnableClock+0xec>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a1f      	ldr	r2, [pc, #124]	@ (800112c <Dio_EnableClock+0xec>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	e031      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <Dio_EnableClock+0xec>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <Dio_EnableClock+0xec>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c4:	e02a      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <Dio_EnableClock+0xec>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <Dio_EnableClock+0xec>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	e023      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <Dio_EnableClock+0xec>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <Dio_EnableClock+0xec>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e0:	e01c      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <Dio_EnableClock+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <Dio_EnableClock+0xec>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	e015      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTG: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; break;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <Dio_EnableClock+0xec>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <Dio_EnableClock+0xec>)
 80010f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fc:	e00e      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <Dio_EnableClock+0xec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <Dio_EnableClock+0xec>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	e007      	b.n	800111c <Dio_EnableClock+0xdc>
            case DIO_PORTI: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; break;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <Dio_EnableClock+0xec>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <Dio_EnableClock+0xec>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6313      	str	r3, [r2, #48]	@ 0x30
 8001118:	e000      	b.n	800111c <Dio_EnableClock+0xdc>
            default: break;
 800111a:	bf00      	nop
        }
    }
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	20000078 	.word	0x20000078
 800112c:	40023800 	.word	0x40023800

08001130 <Dio_Init>:
/**
 * @brief Initializes the DIO module with the provided configuration.
 * @param ConfigPtr Pointer to the DIO configuration structure.
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Dio_Init(const Dio_ConfigType* ConfigPtr) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    if (ConfigPtr == NULL) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <Dio_Init+0x12>
        return E_NOT_OK;
 800113e:	2301      	movs	r3, #1
 8001140:	e0d5      	b.n	80012ee <Dio_Init+0x1be>
    }

    dioConfigPtr = ConfigPtr; /* Lưu con trỏ cấu hình */
 8001142:	4a6d      	ldr	r2, [pc, #436]	@ (80012f8 <Dio_Init+0x1c8>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6013      	str	r3, [r2, #0]

    /* Kiểm tra và cấu hình các kênh */
    for (uint8 i = 0; i < DIO_CHANNEL_COUNT; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e0ca      	b.n	80012e4 <Dio_Init+0x1b4>
        /* Kiểm tra tính hợp lệ của cấu hình */
        if (ConfigPtr[i].Pin >= 16 || Dio_GetPort(ConfigPtr[i].Port) == NULL ||
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d81f      	bhi.n	800119c <Dio_Init+0x6c>
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff52 	bl	8001010 <Dio_GetPort>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d014      	beq.n	800119c <Dio_Init+0x6c>
            ConfigPtr[i].Mode > DIO_OUTPUT || ConfigPtr[i].OutputType > DIO_OPENDRAIN ||
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	795b      	ldrb	r3, [r3, #5]
        if (ConfigPtr[i].Pin >= 16 || Dio_GetPort(ConfigPtr[i].Port) == NULL ||
 800117c:	2b01      	cmp	r3, #1
 800117e:	d80d      	bhi.n	800119c <Dio_Init+0x6c>
            ConfigPtr[i].Mode > DIO_OUTPUT || ConfigPtr[i].OutputType > DIO_OPENDRAIN ||
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	799b      	ldrb	r3, [r3, #6]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d806      	bhi.n	800119c <Dio_Init+0x6c>
            ConfigPtr[i].Pull > DIO_PULL_DOWN) {
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	79db      	ldrb	r3, [r3, #7]
            ConfigPtr[i].Mode > DIO_OUTPUT || ConfigPtr[i].OutputType > DIO_OPENDRAIN ||
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <Dio_Init+0x70>
            return E_NOT_OK;
 800119c:	2301      	movs	r3, #1
 800119e:	e0a6      	b.n	80012ee <Dio_Init+0x1be>
        }

        /* Kiểm tra trùng lặp cấu hình */
        for (uint8 j = 0; j < i; j++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	73bb      	strb	r3, [r7, #14]
 80011a4:	e01c      	b.n	80011e0 <Dio_Init+0xb0>
            if (ConfigPtr[i].Port == ConfigPtr[j].Port && ConfigPtr[i].Pin == ConfigPtr[j].Pin) {
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	440b      	add	r3, r1
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d10d      	bne.n	80011da <Dio_Init+0xaa>
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	791a      	ldrb	r2, [r3, #4]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	440b      	add	r3, r1
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d101      	bne.n	80011da <Dio_Init+0xaa>
                return E_NOT_OK; /* Trùng lặp chân */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e089      	b.n	80012ee <Dio_Init+0x1be>
        for (uint8 j = 0; j < i; j++) {
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	3301      	adds	r3, #1
 80011de:	73bb      	strb	r3, [r7, #14]
 80011e0:	7bba      	ldrb	r2, [r7, #14]
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3de      	bcc.n	80011a6 <Dio_Init+0x76>
            }
        }

        Dio_EnableClock(ConfigPtr[i].Port);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff24 	bl	8001040 <Dio_EnableClock>
        GPIO_TypeDef* port = Dio_GetPort(ConfigPtr[i].Port);
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff04 	bl	8001010 <Dio_GetPort>
 8001208:	60b8      	str	r0, [r7, #8]

        /* Cấu hình mode: 01 = Output, 00 = Input */
        if (ConfigPtr[i].Mode == DIO_OUTPUT) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	795b      	ldrb	r3, [r3, #5]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10e      	bne.n	8001236 <Dio_Init+0x106>
            port->MODER |= (0x01 << (ConfigPtr[i].Pin * 2));
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	00d2      	lsls	r2, r2, #3
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	440a      	add	r2, r1
 8001224:	7912      	ldrb	r2, [r2, #4]
 8001226:	0052      	lsls	r2, r2, #1
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f202 	lsl.w	r2, r1, r2
 800122e:	431a      	orrs	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e00e      	b.n	8001254 <Dio_Init+0x124>
        } else {
            port->MODER &= ~(0x03 << (ConfigPtr[i].Pin * 2));
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	440a      	add	r2, r1
 8001242:	7912      	ldrb	r2, [r2, #4]
 8001244:	0052      	lsls	r2, r2, #1
 8001246:	2103      	movs	r1, #3
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	43d2      	mvns	r2, r2
 800124e:	401a      	ands	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	601a      	str	r2, [r3, #0]
        }
        /* Cấu hình output type: 0 = Push-pull, 1 = Open-drain */
        if (ConfigPtr[i].OutputType == DIO_OPENDRAIN) {
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	799b      	ldrb	r3, [r3, #6]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d10d      	bne.n	800127e <Dio_Init+0x14e>
            port->OTYPER |= (0x01 << ConfigPtr[i].Pin);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	00d2      	lsls	r2, r2, #3
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	440a      	add	r2, r1
 800126e:	7912      	ldrb	r2, [r2, #4]
 8001270:	4611      	mov	r1, r2
 8001272:	2201      	movs	r2, #1
 8001274:	408a      	lsls	r2, r1
 8001276:	431a      	orrs	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e00d      	b.n	800129a <Dio_Init+0x16a>
        } else {
            port->OTYPER &= ~(0x01 << ConfigPtr[i].Pin);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	440a      	add	r2, r1
 800128a:	7912      	ldrb	r2, [r2, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	2201      	movs	r2, #1
 8001290:	408a      	lsls	r2, r1
 8001292:	43d2      	mvns	r2, r2
 8001294:	401a      	ands	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	605a      	str	r2, [r3, #4]
        }
        /* Cấu hình pull-up/pull-down: 00 = No pull, 01 = Pull-up, 10 = Pull-down */
        port->PUPDR &= ~(0x03 << (ConfigPtr[i].Pin * 2));
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	00d2      	lsls	r2, r2, #3
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	440a      	add	r2, r1
 80012a6:	7912      	ldrb	r2, [r2, #4]
 80012a8:	0052      	lsls	r2, r2, #1
 80012aa:	2103      	movs	r1, #3
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	43d2      	mvns	r2, r2
 80012b2:	401a      	ands	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60da      	str	r2, [r3, #12]
        port->PUPDR |= (ConfigPtr[i].Pull << (ConfigPtr[i].Pin * 2));
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	00d2      	lsls	r2, r2, #3
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	440a      	add	r2, r1
 80012c4:	79d2      	ldrb	r2, [r2, #7]
 80012c6:	4610      	mov	r0, r2
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	00d2      	lsls	r2, r2, #3
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	440a      	add	r2, r1
 80012d0:	7912      	ldrb	r2, [r2, #4]
 80012d2:	0052      	lsls	r2, r2, #1
 80012d4:	fa00 f202 	lsl.w	r2, r0, r2
 80012d8:	431a      	orrs	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	60da      	str	r2, [r3, #12]
    for (uint8 i = 0; i < DIO_CHANNEL_COUNT; i++) {
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	3301      	adds	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	f67f af31 	bls.w	800114e <Dio_Init+0x1e>
    }
    return E_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000074 	.word	0x20000074

080012fc <Dio_WriteChannel>:
 * @param ChannelId Channel identifier (0-15).
 * @param Level Level to set (STD_HIGH or STD_LOW).
 * @param PortId Port identifier (DIO_PORTA to DIO_PORTI).
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level, Dio_PortType PortId) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	460b      	mov	r3, r1
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	72fb      	strb	r3, [r7, #11]
    if (dioConfigPtr == NULL || ChannelId >= 16 || Dio_GetPort(PortId) == NULL) {
 800130a:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <Dio_WriteChannel+0xac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d008      	beq.n	8001324 <Dio_WriteChannel+0x28>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d805      	bhi.n	8001324 <Dio_WriteChannel+0x28>
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fe79 	bl	8001010 <Dio_GetPort>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <Dio_WriteChannel+0x2c>
        return E_NOT_OK;
 8001324:	2301      	movs	r3, #1
 8001326:	e03b      	b.n	80013a0 <Dio_WriteChannel+0xa4>
    }

    /* Kiểm tra xem kênh có được cấu hình là output không */
    for (uint8 i = 0; i < DIO_CHANNEL_COUNT; i++) {
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
 800132c:	e01f      	b.n	800136e <Dio_WriteChannel+0x72>
        if (dioConfigPtr[i].Port == PortId && dioConfigPtr[i].Pin == ChannelId) {
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <Dio_WriteChannel+0xac>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	d113      	bne.n	8001368 <Dio_WriteChannel+0x6c>
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <Dio_WriteChannel+0xac>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4293      	cmp	r3, r2
 8001352:	d109      	bne.n	8001368 <Dio_WriteChannel+0x6c>
            if (dioConfigPtr[i].Mode != DIO_OUTPUT) {
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <Dio_WriteChannel+0xac>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	795b      	ldrb	r3, [r3, #5]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d008      	beq.n	8001376 <Dio_WriteChannel+0x7a>
                return E_NOT_OK;
 8001364:	2301      	movs	r3, #1
 8001366:	e01b      	b.n	80013a0 <Dio_WriteChannel+0xa4>
    for (uint8 i = 0; i < DIO_CHANNEL_COUNT; i++) {
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	3301      	adds	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d9dc      	bls.n	800132e <Dio_WriteChannel+0x32>
 8001374:	e000      	b.n	8001378 <Dio_WriteChannel+0x7c>
            }
            break;
 8001376:	bf00      	nop
        }
    }

    GPIO_TypeDef* port = Dio_GetPort(PortId);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe49 	bl	8001010 <Dio_GetPort>
 800137e:	6138      	str	r0, [r7, #16]
    if (Level == STD_HIGH) {
 8001380:	7afb      	ldrb	r3, [r7, #11]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <Dio_WriteChannel+0x96>
        port->BSRR = (1U << ChannelId);
 8001386:	2201      	movs	r2, #1
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	619a      	str	r2, [r3, #24]
 8001390:	e005      	b.n	800139e <Dio_WriteChannel+0xa2>
    } else {
        port->BSRR = (1U << (ChannelId + 16));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3310      	adds	r3, #16
 8001396:	2201      	movs	r2, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	619a      	str	r2, [r3, #24]
    }
    return E_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000074 	.word	0x20000074

080013ac <__NVIC_EnableIRQ>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <Uart_GetChannel>:
static uint8 UartTxIndex[UART_CHANNEL_COUNT] = {0};
static uint8 UartRxIndex[UART_CHANNEL_COUNT] = {0};
static uint8 clockEnabled[3] = {0}; /* Hỗ trợ USART1, USART2, USART3 */

/* Hàm hỗ trợ: Lấy con trỏ USART từ ChannelId */
static USART_TypeDef* Uart_GetChannel(Uart_ChannelType ChannelId) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    if (ChannelId >= UART_CHANNEL_USART1 && ChannelId <= UART_CHANNEL_USART3) {
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <Uart_GetChannel+0x20>
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d804      	bhi.n	8001408 <Uart_GetChannel+0x20>
        return uartMap[ChannelId];
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <Uart_GetChannel+0x30>)
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	e000      	b.n	800140a <Uart_GetChannel+0x22>
    }
    return NULL;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	08003c0c 	.word	0x08003c0c

0800141c <Uart_EnableClock>:

/* Hàm hỗ trợ: Kích hoạt clock cho USART */
static void Uart_EnableClock(Uart_ChannelType ChannelId) {
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
    if (ChannelId >= UART_CHANNEL_USART1 && ChannelId <= UART_CHANNEL_USART3 && !clockEnabled[ChannelId - UART_CHANNEL_USART1]) {
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d02d      	beq.n	8001488 <Uart_EnableClock+0x6c>
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d82a      	bhi.n	8001488 <Uart_EnableClock+0x6c>
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <Uart_EnableClock+0x78>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d124      	bne.n	8001488 <Uart_EnableClock+0x6c>
        clockEnabled[ChannelId - UART_CHANNEL_USART1] = 1;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a14      	ldr	r2, [pc, #80]	@ (8001494 <Uart_EnableClock+0x78>)
 8001444:	2101      	movs	r1, #1
 8001446:	54d1      	strb	r1, [r2, r3]
        switch (ChannelId) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d014      	beq.n	8001478 <Uart_EnableClock+0x5c>
 800144e:	2b03      	cmp	r3, #3
 8001450:	dc19      	bgt.n	8001486 <Uart_EnableClock+0x6a>
 8001452:	2b01      	cmp	r3, #1
 8001454:	d002      	beq.n	800145c <Uart_EnableClock+0x40>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d007      	beq.n	800146a <Uart_EnableClock+0x4e>
            case UART_CHANNEL_USART1: RCC->APB2ENR |= RCC_APB2ENR_USART1EN; break;
            case UART_CHANNEL_USART2: RCC->APB1ENR |= RCC_APB1ENR_USART2EN; break;
            case UART_CHANNEL_USART3: RCC->APB1ENR |= RCC_APB1ENR_USART3EN; break;
            default: break;
 800145a:	e014      	b.n	8001486 <Uart_EnableClock+0x6a>
            case UART_CHANNEL_USART1: RCC->APB2ENR |= RCC_APB2ENR_USART1EN; break;
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <Uart_EnableClock+0x7c>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <Uart_EnableClock+0x7c>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6453      	str	r3, [r2, #68]	@ 0x44
 8001468:	e00e      	b.n	8001488 <Uart_EnableClock+0x6c>
            case UART_CHANNEL_USART2: RCC->APB1ENR |= RCC_APB1ENR_USART2EN; break;
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <Uart_EnableClock+0x7c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <Uart_EnableClock+0x7c>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	e007      	b.n	8001488 <Uart_EnableClock+0x6c>
            case UART_CHANNEL_USART3: RCC->APB1ENR |= RCC_APB1ENR_USART3EN; break;
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <Uart_EnableClock+0x7c>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <Uart_EnableClock+0x7c>)
 800147e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001482:	6413      	str	r3, [r2, #64]	@ 0x40
 8001484:	e000      	b.n	8001488 <Uart_EnableClock+0x6c>
            default: break;
 8001486:	bf00      	nop
        }
    }
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200000b4 	.word	0x200000b4
 8001498:	40023800 	.word	0x40023800

0800149c <Uart_ConfigureGpio>:

/* Hàm hỗ trợ: Cấu hình GPIO cho UART */
static void Uart_ConfigureGpio(Uart_ChannelType ChannelId, Dio_PortType Port, uint8 TxPin, uint8 RxPin, uint8 AlternateFunction) {
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6039      	str	r1, [r7, #0]
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	460b      	mov	r3, r1
 80014ae:	71bb      	strb	r3, [r7, #6]
 80014b0:	4613      	mov	r3, r2
 80014b2:	717b      	strb	r3, [r7, #5]
    GPIO_TypeDef* gpio = NULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
    switch (Port) {
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d003      	beq.n	80014c6 <Uart_ConfigureGpio+0x2a>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d009      	beq.n	80014d8 <Uart_ConfigureGpio+0x3c>
        case DIO_PORTA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; gpio = GPIOA; break;
        case DIO_PORTB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; gpio = GPIOB; break;
        default: return;
 80014c4:	e0a9      	b.n	800161a <Uart_ConfigureGpio+0x17e>
        case DIO_PORTA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; gpio = GPIOA; break;
 80014c6:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <Uart_ConfigureGpio+0x188>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a56      	ldr	r2, [pc, #344]	@ (8001624 <Uart_ConfigureGpio+0x188>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <Uart_ConfigureGpio+0x18c>)
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e008      	b.n	80014ea <Uart_ConfigureGpio+0x4e>
        case DIO_PORTB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; gpio = GPIOB; break;
 80014d8:	4b52      	ldr	r3, [pc, #328]	@ (8001624 <Uart_ConfigureGpio+0x188>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	4a51      	ldr	r2, [pc, #324]	@ (8001624 <Uart_ConfigureGpio+0x188>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e4:	4b51      	ldr	r3, [pc, #324]	@ (800162c <Uart_ConfigureGpio+0x190>)
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	bf00      	nop
    }
    if (TxPin >= 16 || RxPin >= 16 || AlternateFunction > 15) return;
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	f200 8093 	bhi.w	8001618 <Uart_ConfigureGpio+0x17c>
 80014f2:	797b      	ldrb	r3, [r7, #5]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	f200 808f 	bhi.w	8001618 <Uart_ConfigureGpio+0x17c>
 80014fa:	7e3b      	ldrb	r3, [r7, #24]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	f200 808b 	bhi.w	8001618 <Uart_ConfigureGpio+0x17c>

    /* Cấu hình TX và RX thành alternate function mode */
    gpio->MODER &= ~(0xF << (TxPin * 2)); /* Xóa cấu hình cũ */
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	79ba      	ldrb	r2, [r7, #6]
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	210f      	movs	r1, #15
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	43d2      	mvns	r2, r2
 8001512:	401a      	ands	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	601a      	str	r2, [r3, #0]
    gpio->MODER |= (0x2 << (TxPin * 2)); /* AF mode cho TX */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	79ba      	ldrb	r2, [r7, #6]
 800151e:	0052      	lsls	r2, r2, #1
 8001520:	2102      	movs	r1, #2
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	431a      	orrs	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]
    gpio->MODER &= ~(0xF << (RxPin * 2));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	797a      	ldrb	r2, [r7, #5]
 8001532:	0052      	lsls	r2, r2, #1
 8001534:	210f      	movs	r1, #15
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	43d2      	mvns	r2, r2
 800153c:	401a      	ands	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	601a      	str	r2, [r3, #0]
    gpio->MODER |= (0x2 << (RxPin * 2)); /* AF mode cho RX */
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	797a      	ldrb	r2, [r7, #5]
 8001548:	0052      	lsls	r2, r2, #1
 800154a:	2102      	movs	r1, #2
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	431a      	orrs	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]

    /* Cấu hình alternate function */
    if (TxPin < 8) {
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d815      	bhi.n	8001588 <Uart_ConfigureGpio+0xec>
        gpio->AFR[0] &= ~(0xF << (TxPin * 4));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	79ba      	ldrb	r2, [r7, #6]
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	210f      	movs	r1, #15
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	43d2      	mvns	r2, r2
 800156c:	401a      	ands	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	621a      	str	r2, [r3, #32]
        gpio->AFR[0] |= (AlternateFunction << (TxPin * 4));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	7e39      	ldrb	r1, [r7, #24]
 8001578:	79ba      	ldrb	r2, [r7, #6]
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	431a      	orrs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	621a      	str	r2, [r3, #32]
 8001586:	e016      	b.n	80015b6 <Uart_ConfigureGpio+0x11a>
    } else {
        gpio->AFR[1] &= ~(0xF << ((TxPin - 8) * 4));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	79ba      	ldrb	r2, [r7, #6]
 800158e:	3a08      	subs	r2, #8
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	210f      	movs	r1, #15
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24
        gpio->AFR[1] |= (AlternateFunction << ((TxPin - 8) * 4));
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	7e39      	ldrb	r1, [r7, #24]
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	3a08      	subs	r2, #8
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	431a      	orrs	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (RxPin < 8) {
 80015b6:	797b      	ldrb	r3, [r7, #5]
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	d815      	bhi.n	80015e8 <Uart_ConfigureGpio+0x14c>
        gpio->AFR[0] &= ~(0xF << (RxPin * 4));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	797a      	ldrb	r2, [r7, #5]
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	210f      	movs	r1, #15
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	43d2      	mvns	r2, r2
 80015cc:	401a      	ands	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	621a      	str	r2, [r3, #32]
        gpio->AFR[0] |= (AlternateFunction << (RxPin * 4));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	7e39      	ldrb	r1, [r7, #24]
 80015d8:	797a      	ldrb	r2, [r7, #5]
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	431a      	orrs	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	621a      	str	r2, [r3, #32]
 80015e6:	e018      	b.n	800161a <Uart_ConfigureGpio+0x17e>
    } else {
        gpio->AFR[1] &= ~(0xF << ((RxPin - 8) * 4));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	797a      	ldrb	r2, [r7, #5]
 80015ee:	3a08      	subs	r2, #8
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	210f      	movs	r1, #15
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	43d2      	mvns	r2, r2
 80015fa:	401a      	ands	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24
        gpio->AFR[1] |= (AlternateFunction << ((RxPin - 8) * 4));
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	7e39      	ldrb	r1, [r7, #24]
 8001606:	797a      	ldrb	r2, [r7, #5]
 8001608:	3a08      	subs	r2, #8
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	431a      	orrs	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
 8001616:	e000      	b.n	800161a <Uart_ConfigureGpio+0x17e>
    if (TxPin >= 16 || RxPin >= 16 || AlternateFunction > 15) return;
 8001618:	bf00      	nop
    }
}
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400

08001630 <Uart_ConfigureDma>:

/* Hàm hỗ trợ: Cấu hình DMA cho UART */
static void Uart_ConfigureDma(Uart_ChannelType ChannelId, Uart_DataType* TxBuffer, Uart_DataType* RxBuffer, uint8 TxLength, uint8 RxLength) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	4613      	mov	r3, r2
 8001642:	73bb      	strb	r3, [r7, #14]
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN; /* Bật clock DMA1 và DMA2 */
 8001644:	4b54      	ldr	r3, [pc, #336]	@ (8001798 <Uart_ConfigureDma+0x168>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	4a53      	ldr	r2, [pc, #332]	@ (8001798 <Uart_ConfigureDma+0x168>)
 800164a:	f443 03c0 	orr.w	r3, r3, #6291456	@ 0x600000
 800164e:	6313      	str	r3, [r2, #48]	@ 0x30
    DMA_Stream_TypeDef* txStream = NULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    DMA_Stream_TypeDef* rxStream = NULL;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
    uint32 txChannel = 4, rxChannel = 4;
 8001658:	2304      	movs	r3, #4
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	2304      	movs	r3, #4
 800165e:	613b      	str	r3, [r7, #16]
    uint32 txIrq = 0, rxIrq = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]

    switch (ChannelId) {
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d019      	beq.n	80016a2 <Uart_ConfigureDma+0x72>
 800166e:	2b03      	cmp	r3, #3
 8001670:	f300 808d 	bgt.w	800178e <Uart_ConfigureDma+0x15e>
 8001674:	2b01      	cmp	r3, #1
 8001676:	d002      	beq.n	800167e <Uart_ConfigureDma+0x4e>
 8001678:	2b02      	cmp	r3, #2
 800167a:	d009      	beq.n	8001690 <Uart_ConfigureDma+0x60>
            break;
        case UART_CHANNEL_USART3:
            txStream = DMA1_Stream3; rxStream = DMA1_Stream1;
            txIrq = DMA1_Stream3_IRQn; rxIrq = DMA1_Stream1_IRQn;
            break;
        default: return;
 800167c:	e087      	b.n	800178e <Uart_ConfigureDma+0x15e>
            txStream = DMA2_Stream7; rxStream = DMA2_Stream5;
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <Uart_ConfigureDma+0x16c>)
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <Uart_ConfigureDma+0x170>)
 8001684:	623b      	str	r3, [r7, #32]
            txIrq = DMA2_Stream7_IRQn; rxIrq = DMA2_Stream5_IRQn;
 8001686:	2346      	movs	r3, #70	@ 0x46
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	2344      	movs	r3, #68	@ 0x44
 800168c:	61bb      	str	r3, [r7, #24]
            break;
 800168e:	e011      	b.n	80016b4 <Uart_ConfigureDma+0x84>
            txStream = DMA1_Stream6; rxStream = DMA1_Stream5;
 8001690:	4b44      	ldr	r3, [pc, #272]	@ (80017a4 <Uart_ConfigureDma+0x174>)
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	4b44      	ldr	r3, [pc, #272]	@ (80017a8 <Uart_ConfigureDma+0x178>)
 8001696:	623b      	str	r3, [r7, #32]
            txIrq = DMA1_Stream6_IRQn; rxIrq = DMA1_Stream5_IRQn;
 8001698:	2311      	movs	r3, #17
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	2310      	movs	r3, #16
 800169e:	61bb      	str	r3, [r7, #24]
            break;
 80016a0:	e008      	b.n	80016b4 <Uart_ConfigureDma+0x84>
            txStream = DMA1_Stream3; rxStream = DMA1_Stream1;
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <Uart_ConfigureDma+0x17c>)
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a6:	4b42      	ldr	r3, [pc, #264]	@ (80017b0 <Uart_ConfigureDma+0x180>)
 80016a8:	623b      	str	r3, [r7, #32]
            txIrq = DMA1_Stream3_IRQn; rxIrq = DMA1_Stream1_IRQn;
 80016aa:	230e      	movs	r3, #14
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	230c      	movs	r3, #12
 80016b0:	61bb      	str	r3, [r7, #24]
            break;
 80016b2:	bf00      	nop
    }

    /* Cấu hình DMA TX */
    if (TxBuffer != NULL && TxLength > 0) {
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d032      	beq.n	8001720 <Uart_ConfigureDma+0xf0>
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d02f      	beq.n	8001720 <Uart_ConfigureDma+0xf0>
        txStream->CR = 0; /* Reset CR */
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
        txStream->CR |= (txChannel << 25); /* Channel */
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	065b      	lsls	r3, r3, #25
 80016ce:	431a      	orrs	r2, r3
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	601a      	str	r2, [r3, #0]
        txStream->CR |= (1 << 10); /* Memory increment */
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	601a      	str	r2, [r3, #0]
        txStream->CR |= (1 << 6); /* Memory-to-peripheral */
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	601a      	str	r2, [r3, #0]
        txStream->CR |= (1 << 8); /* Enable TC interrupt */
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f6:	601a      	str	r2, [r3, #0]
        txStream->PAR = (uint32_t)&Uart_GetChannel(ChannelId)->DR;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fe74 	bl	80013e8 <Uart_GetChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	3304      	adds	r3, #4
 8001704:	461a      	mov	r2, r3
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	609a      	str	r2, [r3, #8]
        txStream->M0AR = (uint32_t)TxBuffer;
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	60da      	str	r2, [r3, #12]
        txStream->NDTR = TxLength;
 8001710:	7bba      	ldrb	r2, [r7, #14]
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	605a      	str	r2, [r3, #4]
        NVIC_EnableIRQ(txIrq);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe46 	bl	80013ac <__NVIC_EnableIRQ>
    }

    /* Cấu hình DMA RX */
    if (RxBuffer != NULL && RxLength > 0) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d034      	beq.n	8001790 <Uart_ConfigureDma+0x160>
 8001726:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800172a:	2b00      	cmp	r3, #0
 800172c:	d030      	beq.n	8001790 <Uart_ConfigureDma+0x160>
        rxStream->CR = 0; /* Reset CR */
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
        rxStream->CR |= (rxChannel << 25); /* Channel */
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	065b      	lsls	r3, r3, #25
 800173c:	431a      	orrs	r2, r3
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	601a      	str	r2, [r3, #0]
        rxStream->CR |= (1 << 10); /* Memory increment */
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	601a      	str	r2, [r3, #0]
        rxStream->CR |= (0 << 6); /* Peripheral-to-memory */
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	601a      	str	r2, [r3, #0]
        rxStream->CR |= (1 << 8); /* Enable TC interrupt */
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	601a      	str	r2, [r3, #0]
        rxStream->PAR = (uint32_t)&Uart_GetChannel(ChannelId)->DR;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fe3f 	bl	80013e8 <Uart_GetChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	3304      	adds	r3, #4
 800176e:	461a      	mov	r2, r3
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	609a      	str	r2, [r3, #8]
        rxStream->M0AR = (uint32_t)RxBuffer;
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	60da      	str	r2, [r3, #12]
        rxStream->NDTR = RxLength;
 800177a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	605a      	str	r2, [r3, #4]
        NVIC_EnableIRQ(rxIrq);
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fe10 	bl	80013ac <__NVIC_EnableIRQ>
 800178c:	e000      	b.n	8001790 <Uart_ConfigureDma+0x160>
        default: return;
 800178e:	bf00      	nop
    }
}
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	400264b8 	.word	0x400264b8
 80017a0:	40026488 	.word	0x40026488
 80017a4:	400260a0 	.word	0x400260a0
 80017a8:	40026088 	.word	0x40026088
 80017ac:	40026058 	.word	0x40026058
 80017b0:	40026028 	.word	0x40026028

080017b4 <Uart_Init>:
/**
 * @brief Initializes the UART module with the provided configuration.
 * @param ConfigPtr Pointer to the UART configuration structure.
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Uart_Init(const Uart_ConfigType* ConfigPtr) {
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6078      	str	r0, [r7, #4]
    if (ConfigPtr == NULL) return E_NOT_OK;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <Uart_Init+0x12>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e207      	b.n	8001bd6 <Uart_Init+0x422>

    UartConfigPtr = ConfigPtr;
 80017c6:	4aa2      	ldr	r2, [pc, #648]	@ (8001a50 <Uart_Init+0x29c>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]

    for (uint8 i = 0; i < UART_CHANNEL_COUNT; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
 80017d0:	e1fc      	b.n	8001bcc <Uart_Init+0x418>
        /* Kiểm tra tính hợp lệ của cấu hình */
        if (Uart_GetChannel(ConfigPtr[i].ChannelId) == NULL ||
 80017d2:	7ffa      	ldrb	r2, [r7, #31]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fdff 	bl	80013e8 <Uart_GetChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d06d      	beq.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].Baudrate == 0 ||
 80017f0:	7ffa      	ldrb	r2, [r7, #31]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	685b      	ldr	r3, [r3, #4]
        if (Uart_GetChannel(ConfigPtr[i].ChannelId) == NULL ||
 8001802:	2b00      	cmp	r3, #0
 8001804:	d062      	beq.n	80018cc <Uart_Init+0x118>
            (ConfigPtr[i].DataBits != 8 && ConfigPtr[i].DataBits != 9) ||
 8001806:	7ffa      	ldrb	r2, [r7, #31]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	7a1b      	ldrb	r3, [r3, #8]
            ConfigPtr[i].Baudrate == 0 ||
 8001818:	2b08      	cmp	r3, #8
 800181a:	d00a      	beq.n	8001832 <Uart_Init+0x7e>
            (ConfigPtr[i].DataBits != 8 && ConfigPtr[i].DataBits != 9) ||
 800181c:	7ffa      	ldrb	r2, [r7, #31]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	7a1b      	ldrb	r3, [r3, #8]
 800182e:	2b09      	cmp	r3, #9
 8001830:	d14c      	bne.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].Parity > UART_PARITY_ODD ||
 8001832:	7ffa      	ldrb	r2, [r7, #31]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	7a5b      	ldrb	r3, [r3, #9]
            (ConfigPtr[i].DataBits != 8 && ConfigPtr[i].DataBits != 9) ||
 8001844:	2b02      	cmp	r3, #2
 8001846:	d841      	bhi.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].StopBits > UART_STOP_BITS_2 ||
 8001848:	7ffa      	ldrb	r2, [r7, #31]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	7a9b      	ldrb	r3, [r3, #10]
            ConfigPtr[i].Parity > UART_PARITY_ODD ||
 800185a:	2b01      	cmp	r3, #1
 800185c:	d836      	bhi.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].Mode > UART_MODE_DMA ||
 800185e:	7ffa      	ldrb	r2, [r7, #31]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	7adb      	ldrb	r3, [r3, #11]
            ConfigPtr[i].StopBits > UART_STOP_BITS_2 ||
 8001870:	2b02      	cmp	r3, #2
 8001872:	d82b      	bhi.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].Port > DIO_PORTB ||
 8001874:	7ffa      	ldrb	r2, [r7, #31]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	68db      	ldr	r3, [r3, #12]
            ConfigPtr[i].Mode > UART_MODE_DMA ||
 8001886:	2b02      	cmp	r3, #2
 8001888:	d820      	bhi.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].TxPin >= 16 || ConfigPtr[i].RxPin >= 16 ||
 800188a:	7ffa      	ldrb	r2, [r7, #31]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	461a      	mov	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	7c1b      	ldrb	r3, [r3, #16]
            ConfigPtr[i].Port > DIO_PORTB ||
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d815      	bhi.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].TxPin >= 16 || ConfigPtr[i].RxPin >= 16 ||
 80018a0:	7ffa      	ldrb	r2, [r7, #31]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	7c5b      	ldrb	r3, [r3, #17]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	d80a      	bhi.n	80018cc <Uart_Init+0x118>
            ConfigPtr[i].AlternateFunction > 15) {
 80018b6:	7ffa      	ldrb	r2, [r7, #31]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	461a      	mov	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	7c9b      	ldrb	r3, [r3, #18]
            ConfigPtr[i].TxPin >= 16 || ConfigPtr[i].RxPin >= 16 ||
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d901      	bls.n	80018d0 <Uart_Init+0x11c>
            return E_NOT_OK;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e182      	b.n	8001bd6 <Uart_Init+0x422>
        }

        UartStatus[i] = UART_IDLE;
 80018d0:	7ffb      	ldrb	r3, [r7, #31]
 80018d2:	4a60      	ldr	r2, [pc, #384]	@ (8001a54 <Uart_Init+0x2a0>)
 80018d4:	2100      	movs	r1, #0
 80018d6:	54d1      	strb	r1, [r2, r3]
        UartTxBuffer[i] = NULL;
 80018d8:	7ffb      	ldrb	r3, [r7, #31]
 80018da:	4a5f      	ldr	r2, [pc, #380]	@ (8001a58 <Uart_Init+0x2a4>)
 80018dc:	2100      	movs	r1, #0
 80018de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        UartRxBuffer[i] = NULL;
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a5c <Uart_Init+0x2a8>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        UartTxLength[i] = 0;
 80018ec:	7ffb      	ldrb	r3, [r7, #31]
 80018ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001a60 <Uart_Init+0x2ac>)
 80018f0:	2100      	movs	r1, #0
 80018f2:	54d1      	strb	r1, [r2, r3]
        UartRxLength[i] = 0;
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a64 <Uart_Init+0x2b0>)
 80018f8:	2100      	movs	r1, #0
 80018fa:	54d1      	strb	r1, [r2, r3]
        UartTxIndex[i] = 0;
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001a68 <Uart_Init+0x2b4>)
 8001900:	2100      	movs	r1, #0
 8001902:	54d1      	strb	r1, [r2, r3]
        UartRxIndex[i] = 0;
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	4a59      	ldr	r2, [pc, #356]	@ (8001a6c <Uart_Init+0x2b8>)
 8001908:	2100      	movs	r1, #0
 800190a:	54d1      	strb	r1, [r2, r3]

        /* Kích hoạt clock và cấu hình GPIO */
        Uart_EnableClock(ConfigPtr[i].ChannelId);
 800190c:	7ffa      	ldrb	r2, [r7, #31]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fd7c 	bl	800141c <Uart_EnableClock>
        Uart_ConfigureGpio(ConfigPtr[i].ChannelId, ConfigPtr[i].Port, ConfigPtr[i].TxPin, ConfigPtr[i].RxPin, ConfigPtr[i].AlternateFunction);
 8001924:	7ffa      	ldrb	r2, [r7, #31]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	7818      	ldrb	r0, [r3, #0]
 8001936:	7ffa      	ldrb	r2, [r7, #31]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	68d9      	ldr	r1, [r3, #12]
 8001948:	7ffa      	ldrb	r2, [r7, #31]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	7c1c      	ldrb	r4, [r3, #16]
 800195a:	7ffa      	ldrb	r2, [r7, #31]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	7c5d      	ldrb	r5, [r3, #17]
 800196c:	7ffa      	ldrb	r2, [r7, #31]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	7c9b      	ldrb	r3, [r3, #18]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	462b      	mov	r3, r5
 8001982:	4622      	mov	r2, r4
 8001984:	f7ff fd8a 	bl	800149c <Uart_ConfigureGpio>

        USART_TypeDef* usart = Uart_GetChannel(ConfigPtr[i].ChannelId);
 8001988:	7ffa      	ldrb	r2, [r7, #31]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fd24 	bl	80013e8 <Uart_GetChannel>
 80019a0:	61b8      	str	r0, [r7, #24]

        /* Tính baud rate */
        uint32 clock = (ConfigPtr[i].ChannelId == UART_CHANNEL_USART1) ? 84000000UL : 42000000UL; /* APB2: 84MHz, APB1: 42MHz */
 80019a2:	7ffa      	ldrb	r2, [r7, #31]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <Uart_Init+0x208>
 80019b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <Uart_Init+0x2bc>)
 80019ba:	e000      	b.n	80019be <Uart_Init+0x20a>
 80019bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <Uart_Init+0x2c0>)
 80019be:	617b      	str	r3, [r7, #20]
        uint32 divider = (clock * 25) / (4 * ConfigPtr[i].Baudrate);
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	1899      	adds	r1, r3, r2
 80019cc:	7ffa      	ldrb	r2, [r7, #31]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e4:	613b      	str	r3, [r7, #16]
        uint16 mantissa = divider / 100;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4a23      	ldr	r2, [pc, #140]	@ (8001a78 <Uart_Init+0x2c4>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	81fb      	strh	r3, [r7, #14]
        uint8 fraction = ((divider % 100) * 16 + 50) / 100;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <Uart_Init+0x2c4>)
 80019f6:	fba3 1302 	umull	r1, r3, r3, r2
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2164      	movs	r1, #100	@ 0x64
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	3332      	adds	r3, #50	@ 0x32
 8001a08:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <Uart_Init+0x2c4>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	737b      	strb	r3, [r7, #13]
        usart->BRR = (mantissa << 4) | (fraction & 0x0F);
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	011a      	lsls	r2, r3, #4
 8001a16:	7b7b      	ldrb	r3, [r7, #13]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	609a      	str	r2, [r3, #8]

        /* Cấu hình CR1: Data bits, Parity, Enable USART */
        usart->CR1 = 0; /* Reset CR1 */
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
        if (ConfigPtr[i].DataBits == 9) {
 8001a2a:	7ffa      	ldrb	r2, [r7, #31]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	7a1b      	ldrb	r3, [r3, #8]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	d11d      	bne.n	8001a7c <Uart_Init+0x2c8>
            usart->CR1 |= (1 << 12); /* M = 1: 9 data bits */
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	e01c      	b.n	8001a88 <Uart_Init+0x2d4>
 8001a4e:	bf00      	nop
 8001a50:	20000084 	.word	0x20000084
 8001a54:	20000088 	.word	0x20000088
 8001a58:	2000008c 	.word	0x2000008c
 8001a5c:	20000098 	.word	0x20000098
 8001a60:	200000a4 	.word	0x200000a4
 8001a64:	200000a8 	.word	0x200000a8
 8001a68:	200000ac 	.word	0x200000ac
 8001a6c:	200000b0 	.word	0x200000b0
 8001a70:	0501bd00 	.word	0x0501bd00
 8001a74:	0280de80 	.word	0x0280de80
 8001a78:	51eb851f 	.word	0x51eb851f
        } else {
            usart->CR1 &= ~(1 << 12); /* M = 0: 8 data bits */
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
        }
        if (ConfigPtr[i].Parity != UART_PARITY_NONE) {
 8001a88:	7ffa      	ldrb	r2, [r7, #31]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	7a5b      	ldrb	r3, [r3, #9]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01d      	beq.n	8001ada <Uart_Init+0x326>
            usart->CR1 |= (1 << 10); /* PCE = 1: Enable parity */
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60da      	str	r2, [r3, #12]
            if (ConfigPtr[i].Parity == UART_PARITY_ODD) {
 8001aaa:	7ffa      	ldrb	r2, [r7, #31]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	7a5b      	ldrb	r3, [r3, #9]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d106      	bne.n	8001ace <Uart_Init+0x31a>
                usart->CR1 |= (1 << 9); /* PS = 1: Odd parity */
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	e005      	b.n	8001ada <Uart_Init+0x326>
            } else {
                usart->CR1 &= ~(1 << 9); /* PS = 0: Even parity */
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60da      	str	r2, [r3, #12]
            }
        }
        usart->CR1 |= (1 << 3) | (1 << 2); /* TE = 1, RE = 1: Enable TX, RX */
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f043 020c 	orr.w	r2, r3, #12
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60da      	str	r2, [r3, #12]
        if (ConfigPtr[i].Mode == UART_MODE_INTERRUPT) {
 8001ae6:	7ffa      	ldrb	r2, [r7, #31]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	7adb      	ldrb	r3, [r3, #11]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d132      	bne.n	8001b62 <Uart_Init+0x3ae>
            usart->CR1 |= (1 << 5) | (1 << 7); /* RXNEIE, TXEIE: Enable interrupts */
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f043 02a0 	orr.w	r2, r3, #160	@ 0xa0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
            if (ConfigPtr[i].ChannelId == UART_CHANNEL_USART1) {
 8001b08:	7ffa      	ldrb	r2, [r7, #31]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d103      	bne.n	8001b26 <Uart_Init+0x372>
                NVIC_EnableIRQ(USART1_IRQn);
 8001b1e:	2025      	movs	r0, #37	@ 0x25
 8001b20:	f7ff fc44 	bl	80013ac <__NVIC_EnableIRQ>
 8001b24:	e02e      	b.n	8001b84 <Uart_Init+0x3d0>
            } else if (ConfigPtr[i].ChannelId == UART_CHANNEL_USART2) {
 8001b26:	7ffa      	ldrb	r2, [r7, #31]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d103      	bne.n	8001b44 <Uart_Init+0x390>
                NVIC_EnableIRQ(USART2_IRQn);
 8001b3c:	2026      	movs	r0, #38	@ 0x26
 8001b3e:	f7ff fc35 	bl	80013ac <__NVIC_EnableIRQ>
 8001b42:	e01f      	b.n	8001b84 <Uart_Init+0x3d0>
            } else if (ConfigPtr[i].ChannelId == UART_CHANNEL_USART3) {
 8001b44:	7ffa      	ldrb	r2, [r7, #31]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d114      	bne.n	8001b84 <Uart_Init+0x3d0>
                NVIC_EnableIRQ(USART3_IRQn);
 8001b5a:	2027      	movs	r0, #39	@ 0x27
 8001b5c:	f7ff fc26 	bl	80013ac <__NVIC_EnableIRQ>
 8001b60:	e010      	b.n	8001b84 <Uart_Init+0x3d0>
            }
        } else if (ConfigPtr[i].Mode == UART_MODE_DMA) {
 8001b62:	7ffa      	ldrb	r2, [r7, #31]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	7adb      	ldrb	r3, [r3, #11]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d105      	bne.n	8001b84 <Uart_Init+0x3d0>
            usart->CR3 |= (1 << 7) | (1 << 6); /* DMAT, DMAR: Enable DMA */
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	615a      	str	r2, [r3, #20]
        }
        usart->CR1 |= (1 << 13); /* UE = 1: Enable USART */
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]

        /* Cấu hình CR2: Stop bits */
        usart->CR2 = 0; /* Reset CR2 */
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
        if (ConfigPtr[i].StopBits == UART_STOP_BITS_2) {
 8001b96:	7ffa      	ldrb	r2, [r7, #31]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	7a9b      	ldrb	r3, [r3, #10]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <Uart_Init+0x406>
            usart->CR2 |= (2 << 12); /* STOP = 10: 2 stop bits */
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	e005      	b.n	8001bc6 <Uart_Init+0x412>
        } else {
            usart->CR2 &= ~(3 << 12); /* STOP = 00: 1 stop bit */
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	611a      	str	r2, [r3, #16]
    for (uint8 i = 0; i < UART_CHANNEL_COUNT; i++) {
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	77fb      	strb	r3, [r7, #31]
 8001bcc:	7ffb      	ldrb	r3, [r7, #31]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	f67f adff 	bls.w	80017d2 <Uart_Init+0x1e>
        }
    }
    return E_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bde:	bf00      	nop

08001be0 <Uart_Write>:
 * @param Channel Channel identifier (UART_CHANNEL_USART1 to UART_CHANNEL_USART3).
 * @param Data Pointer to the data buffer to transmit.
 * @param Length Length of the data to transmit.
 * @return Std_ReturnType E_OK if successful, E_NOT_OK otherwise.
 */
Std_ReturnType Uart_Write(Uart_ChannelType Channel, const Uart_DataType* Data, uint8 Length) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
    if (Channel >= UART_CHANNEL_COUNT || Data == NULL || Length == 0 || UartConfigPtr == NULL) return E_NOT_OK;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d809      	bhi.n	8001c0a <Uart_Write+0x2a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <Uart_Write+0x2a>
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <Uart_Write+0x2a>
 8001c02:	4b52      	ldr	r3, [pc, #328]	@ (8001d4c <Uart_Write+0x16c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <Uart_Write+0x2e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e09a      	b.n	8001d44 <Uart_Write+0x164>
    if (UartStatus[Channel] != UART_IDLE) return E_NOT_OK;
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	@ (8001d50 <Uart_Write+0x170>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <Uart_Write+0x3c>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e093      	b.n	8001d44 <Uart_Write+0x164>

    UartStatus[Channel] = UART_BUSY;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <Uart_Write+0x170>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	54d1      	strb	r1, [r2, r3]
    UartTxBuffer[Channel] = (Uart_DataType*)Data;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	494b      	ldr	r1, [pc, #300]	@ (8001d54 <Uart_Write+0x174>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UartTxLength[Channel] = Length;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4949      	ldr	r1, [pc, #292]	@ (8001d58 <Uart_Write+0x178>)
 8001c32:	79ba      	ldrb	r2, [r7, #6]
 8001c34:	54ca      	strb	r2, [r1, r3]
    UartTxIndex[Channel] = 0;
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4a48      	ldr	r2, [pc, #288]	@ (8001d5c <Uart_Write+0x17c>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	54d1      	strb	r1, [r2, r3]

    USART_TypeDef* usart = Uart_GetChannel(Channel);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fbd1 	bl	80013e8 <Uart_GetChannel>
 8001c46:	60f8      	str	r0, [r7, #12]
    if (usart == NULL) return E_NOT_OK;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <Uart_Write+0x72>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e078      	b.n	8001d44 <Uart_Write+0x164>

    if (UartConfigPtr[Channel].Mode == UART_MODE_POLLING) {
 8001c52:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <Uart_Write+0x16c>)
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	7adb      	ldrb	r3, [r3, #11]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d123      	bne.n	8001cb0 <Uart_Write+0xd0>
        for (uint8 i = 0; i < Length; i++) {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	75fb      	strb	r3, [r7, #23]
 8001c6c:	e010      	b.n	8001c90 <Uart_Write+0xb0>
            while (!(usart->SR & (1 << 7))) {} /* Chờ TXE = 1 */
 8001c6e:	bf00      	nop
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f9      	beq.n	8001c70 <Uart_Write+0x90>
            usart->DR = Data[i];
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	605a      	str	r2, [r3, #4]
        for (uint8 i = 0; i < Length; i++) {
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	75fb      	strb	r3, [r7, #23]
 8001c90:	7dfa      	ldrb	r2, [r7, #23]
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d3ea      	bcc.n	8001c6e <Uart_Write+0x8e>
        }
        while (!(usart->SR & (1 << 6))) {} /* Chờ TC = 1 */
 8001c98:	bf00      	nop
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f9      	beq.n	8001c9a <Uart_Write+0xba>
        UartStatus[Channel] = UART_COMPLETED;
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	4a29      	ldr	r2, [pc, #164]	@ (8001d50 <Uart_Write+0x170>)
 8001caa:	2102      	movs	r1, #2
 8001cac:	54d1      	strb	r1, [r2, r3]
 8001cae:	e048      	b.n	8001d42 <Uart_Write+0x162>
    } else if (UartConfigPtr[Channel].Mode == UART_MODE_INTERRUPT) {
 8001cb0:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <Uart_Write+0x16c>)
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	7adb      	ldrb	r3, [r3, #11]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10f      	bne.n	8001ce6 <Uart_Write+0x106>
        usart->DR = UartTxBuffer[Channel][0]; /* Gửi byte đầu tiên */
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <Uart_Write+0x174>)
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	605a      	str	r2, [r3, #4]
        UartTxIndex[Channel]++;
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <Uart_Write+0x17c>)
 8001cda:	5cd2      	ldrb	r2, [r2, r3]
 8001cdc:	3201      	adds	r2, #1
 8001cde:	b2d1      	uxtb	r1, r2
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <Uart_Write+0x17c>)
 8001ce2:	54d1      	strb	r1, [r2, r3]
 8001ce4:	e02d      	b.n	8001d42 <Uart_Write+0x162>
    } else if (UartConfigPtr[Channel].Mode == UART_MODE_DMA) {
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <Uart_Write+0x16c>)
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	7adb      	ldrb	r3, [r3, #11]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d122      	bne.n	8001d42 <Uart_Write+0x162>
        Uart_ConfigureDma(Channel, (Uart_DataType*)Data, NULL, Length, 0);
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	79f8      	ldrb	r0, [r7, #7]
 8001d00:	2200      	movs	r2, #0
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	f7ff fc92 	bl	8001630 <Uart_ConfigureDma>
        DMA_Stream_TypeDef* txStream = NULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
        switch (Channel) {
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d00c      	beq.n	8001d30 <Uart_Write+0x150>
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	dc0d      	bgt.n	8001d36 <Uart_Write+0x156>
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d002      	beq.n	8001d24 <Uart_Write+0x144>
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d003      	beq.n	8001d2a <Uart_Write+0x14a>
 8001d22:	e008      	b.n	8001d36 <Uart_Write+0x156>
            case UART_CHANNEL_USART1: txStream = DMA2_Stream7; break;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <Uart_Write+0x180>)
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e005      	b.n	8001d36 <Uart_Write+0x156>
            case UART_CHANNEL_USART2: txStream = DMA1_Stream6; break;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <Uart_Write+0x184>)
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e002      	b.n	8001d36 <Uart_Write+0x156>
            case UART_CHANNEL_USART3: txStream = DMA1_Stream3; break;
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <Uart_Write+0x188>)
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	bf00      	nop
        }
        txStream->CR |= (1 << 0); /* EN = 1: Bật DMA */
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	601a      	str	r2, [r3, #0]
    }
    return E_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000084 	.word	0x20000084
 8001d50:	20000088 	.word	0x20000088
 8001d54:	2000008c 	.word	0x2000008c
 8001d58:	200000a4 	.word	0x200000a4
 8001d5c:	200000ac 	.word	0x200000ac
 8001d60:	400264b8 	.word	0x400264b8
 8001d64:	400260a0 	.word	0x400260a0
 8001d68:	40026058 	.word	0x40026058

08001d6c <Uart_GetStatus>:
/**
 * @brief Gets the status of a specific UART channel.
 * @param Channel Channel identifier (UART_CHANNEL_USART1 to UART_CHANNEL_USART3).
 * @return Uart_StatusType Current status of the channel.
 */
Uart_StatusType Uart_GetStatus(Uart_ChannelType Channel) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    if (Channel >= UART_CHANNEL_COUNT || UartConfigPtr == NULL) return UART_IDLE;
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d803      	bhi.n	8001d84 <Uart_GetStatus+0x18>
 8001d7c:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <Uart_GetStatus+0x30>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <Uart_GetStatus+0x1c>
 8001d84:	2300      	movs	r3, #0
 8001d86:	e002      	b.n	8001d8e <Uart_GetStatus+0x22>
    return UartStatus[Channel];
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <Uart_GetStatus+0x34>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000084 	.word	0x20000084
 8001da0:	20000088 	.word	0x20000088

08001da4 <USART1_IRQHandler>:
    usart->CR1 |= (1 << 13); /* UE = 1 */
    return E_OK;
}

/* Xử lý ngắt UART */
void USART1_IRQHandler(void) {
 8001da4:	b490      	push	{r4, r7}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
    USART_TypeDef* usart = USART1;
 8001daa:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <USART1_IRQHandler+0xe4>)
 8001dac:	607b      	str	r3, [r7, #4]
    if (usart->SR & (1 << 3)) { /* ORE: Overrun error */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <USART1_IRQHandler+0x22>
        usart->DR; /* Đọc DR để xóa cờ ORE */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART1] = UART_IDLE;
 8001dbe:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <USART1_IRQHandler+0xe8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	705a      	strb	r2, [r3, #1]
        return;
 8001dc4:	e05b      	b.n	8001e7e <USART1_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 2)) { /* PE: Parity error */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <USART1_IRQHandler+0x3a>
        usart->DR; /* Đọc DR để xóa cờ PE */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART1] = UART_IDLE;
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <USART1_IRQHandler+0xe8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	705a      	strb	r2, [r3, #1]
        return;
 8001ddc:	e04f      	b.n	8001e7e <USART1_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 1)) { /* FE: Framing error */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <USART1_IRQHandler+0x52>
        usart->DR; /* Đọc DR để xóa cờ FE */
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART1] = UART_IDLE;
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <USART1_IRQHandler+0xe8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	705a      	strb	r2, [r3, #1]
        return;
 8001df4:	e043      	b.n	8001e7e <USART1_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 5) && UartRxIndex[UART_CHANNEL_USART1] < UartRxLength[UART_CHANNEL_USART1]) {
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01b      	beq.n	8001e3a <USART1_IRQHandler+0x96>
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <USART1_IRQHandler+0xec>)
 8001e04:	785a      	ldrb	r2, [r3, #1]
 8001e06:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <USART1_IRQHandler+0xf0>)
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d215      	bcs.n	8001e3a <USART1_IRQHandler+0x96>
        UartRxBuffer[UART_CHANNEL_USART1][UartRxIndex[UART_CHANNEL_USART1]++] = usart->DR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6858      	ldr	r0, [r3, #4]
 8001e12:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <USART1_IRQHandler+0xf4>)
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <USART1_IRQHandler+0xec>)
 8001e18:	785b      	ldrb	r3, [r3, #1]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	b2cc      	uxtb	r4, r1
 8001e1e:	491c      	ldr	r1, [pc, #112]	@ (8001e90 <USART1_IRQHandler+0xec>)
 8001e20:	704c      	strb	r4, [r1, #1]
 8001e22:	4413      	add	r3, r2
 8001e24:	b2c2      	uxtb	r2, r0
 8001e26:	701a      	strb	r2, [r3, #0]
        if (UartRxIndex[UART_CHANNEL_USART1] >= UartRxLength[UART_CHANNEL_USART1]) {
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <USART1_IRQHandler+0xec>)
 8001e2a:	785a      	ldrb	r2, [r3, #1]
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <USART1_IRQHandler+0xf0>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d302      	bcc.n	8001e3a <USART1_IRQHandler+0x96>
            UartStatus[UART_CHANNEL_USART1] = UART_COMPLETED;
 8001e34:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <USART1_IRQHandler+0xe8>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	705a      	strb	r2, [r3, #1]
        }
    }
    if (usart->SR & (1 << 7) && UartTxIndex[UART_CHANNEL_USART1] < UartTxLength[UART_CHANNEL_USART1]) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01b      	beq.n	8001e7e <USART1_IRQHandler+0xda>
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <USART1_IRQHandler+0xf8>)
 8001e48:	785a      	ldrb	r2, [r3, #1]
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <USART1_IRQHandler+0xfc>)
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d215      	bcs.n	8001e7e <USART1_IRQHandler+0xda>
        usart->DR = UartTxBuffer[UART_CHANNEL_USART1][UartTxIndex[UART_CHANNEL_USART1]++];
 8001e52:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <USART1_IRQHandler+0x100>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <USART1_IRQHandler+0xf8>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	b2c8      	uxtb	r0, r1
 8001e5e:	490f      	ldr	r1, [pc, #60]	@ (8001e9c <USART1_IRQHandler+0xf8>)
 8001e60:	7048      	strb	r0, [r1, #1]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	605a      	str	r2, [r3, #4]
        if (UartTxIndex[UART_CHANNEL_USART1] >= UartTxLength[UART_CHANNEL_USART1]) {
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <USART1_IRQHandler+0xf8>)
 8001e6e:	785a      	ldrb	r2, [r3, #1]
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <USART1_IRQHandler+0xfc>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d302      	bcc.n	8001e7e <USART1_IRQHandler+0xda>
            UartStatus[UART_CHANNEL_USART1] = UART_COMPLETED;
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <USART1_IRQHandler+0xe8>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	705a      	strb	r2, [r3, #1]
        }
    }
}
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc90      	pop	{r4, r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	20000088 	.word	0x20000088
 8001e90:	200000b0 	.word	0x200000b0
 8001e94:	200000a8 	.word	0x200000a8
 8001e98:	20000098 	.word	0x20000098
 8001e9c:	200000ac 	.word	0x200000ac
 8001ea0:	200000a4 	.word	0x200000a4
 8001ea4:	2000008c 	.word	0x2000008c

08001ea8 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8001ea8:	b490      	push	{r4, r7}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
    USART_TypeDef* usart = USART2;
 8001eae:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <USART2_IRQHandler+0xe4>)
 8001eb0:	607b      	str	r3, [r7, #4]
    if (usart->SR & (1 << 3)) { /* ORE: Overrun error */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <USART2_IRQHandler+0x22>
        usart->DR; /* Đọc DR để xóa cờ ORE */
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART2] = UART_IDLE;
 8001ec2:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <USART2_IRQHandler+0xe8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	709a      	strb	r2, [r3, #2]
        return;
 8001ec8:	e05b      	b.n	8001f82 <USART2_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 2)) { /* PE: Parity error */
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <USART2_IRQHandler+0x3a>
        usart->DR; /* Đọc DR để xóa cờ PE */
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART2] = UART_IDLE;
 8001eda:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <USART2_IRQHandler+0xe8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	709a      	strb	r2, [r3, #2]
        return;
 8001ee0:	e04f      	b.n	8001f82 <USART2_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 1)) { /* FE: Framing error */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <USART2_IRQHandler+0x52>
        usart->DR; /* Đọc DR để xóa cờ FE */
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART2] = UART_IDLE;
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <USART2_IRQHandler+0xe8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	709a      	strb	r2, [r3, #2]
        return;
 8001ef8:	e043      	b.n	8001f82 <USART2_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 5) && UartRxIndex[UART_CHANNEL_USART2] < UartRxLength[UART_CHANNEL_USART2]) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01b      	beq.n	8001f3e <USART2_IRQHandler+0x96>
 8001f06:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <USART2_IRQHandler+0xec>)
 8001f08:	789a      	ldrb	r2, [r3, #2]
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <USART2_IRQHandler+0xf0>)
 8001f0c:	789b      	ldrb	r3, [r3, #2]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d215      	bcs.n	8001f3e <USART2_IRQHandler+0x96>
        UartRxBuffer[UART_CHANNEL_USART2][UartRxIndex[UART_CHANNEL_USART2]++] = usart->DR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6858      	ldr	r0, [r3, #4]
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <USART2_IRQHandler+0xf4>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <USART2_IRQHandler+0xec>)
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	1c59      	adds	r1, r3, #1
 8001f20:	b2cc      	uxtb	r4, r1
 8001f22:	491c      	ldr	r1, [pc, #112]	@ (8001f94 <USART2_IRQHandler+0xec>)
 8001f24:	708c      	strb	r4, [r1, #2]
 8001f26:	4413      	add	r3, r2
 8001f28:	b2c2      	uxtb	r2, r0
 8001f2a:	701a      	strb	r2, [r3, #0]
        if (UartRxIndex[UART_CHANNEL_USART2] >= UartRxLength[UART_CHANNEL_USART2]) {
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <USART2_IRQHandler+0xec>)
 8001f2e:	789a      	ldrb	r2, [r3, #2]
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <USART2_IRQHandler+0xf0>)
 8001f32:	789b      	ldrb	r3, [r3, #2]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d302      	bcc.n	8001f3e <USART2_IRQHandler+0x96>
            UartStatus[UART_CHANNEL_USART2] = UART_COMPLETED;
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <USART2_IRQHandler+0xe8>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	709a      	strb	r2, [r3, #2]
        }
    }
    if (usart->SR & (1 << 7) && UartTxIndex[UART_CHANNEL_USART2] < UartTxLength[UART_CHANNEL_USART2]) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01b      	beq.n	8001f82 <USART2_IRQHandler+0xda>
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <USART2_IRQHandler+0xf8>)
 8001f4c:	789a      	ldrb	r2, [r3, #2]
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <USART2_IRQHandler+0xfc>)
 8001f50:	789b      	ldrb	r3, [r3, #2]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d215      	bcs.n	8001f82 <USART2_IRQHandler+0xda>
        usart->DR = UartTxBuffer[UART_CHANNEL_USART2][UartTxIndex[UART_CHANNEL_USART2]++];
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <USART2_IRQHandler+0x100>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <USART2_IRQHandler+0xf8>)
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	b2c8      	uxtb	r0, r1
 8001f62:	490f      	ldr	r1, [pc, #60]	@ (8001fa0 <USART2_IRQHandler+0xf8>)
 8001f64:	7088      	strb	r0, [r1, #2]
 8001f66:	4413      	add	r3, r2
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]
        if (UartTxIndex[UART_CHANNEL_USART2] >= UartTxLength[UART_CHANNEL_USART2]) {
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <USART2_IRQHandler+0xf8>)
 8001f72:	789a      	ldrb	r2, [r3, #2]
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <USART2_IRQHandler+0xfc>)
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <USART2_IRQHandler+0xda>
            UartStatus[UART_CHANNEL_USART2] = UART_COMPLETED;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <USART2_IRQHandler+0xe8>)
 8001f7e:	2202      	movs	r2, #2
 8001f80:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc90      	pop	{r4, r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	20000088 	.word	0x20000088
 8001f94:	200000b0 	.word	0x200000b0
 8001f98:	200000a8 	.word	0x200000a8
 8001f9c:	20000098 	.word	0x20000098
 8001fa0:	200000ac 	.word	0x200000ac
 8001fa4:	200000a4 	.word	0x200000a4
 8001fa8:	2000008c 	.word	0x2000008c

08001fac <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8001fac:	b490      	push	{r4, r7}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
    USART_TypeDef* usart = USART3;
 8001fb2:	4b37      	ldr	r3, [pc, #220]	@ (8002090 <USART3_IRQHandler+0xe4>)
 8001fb4:	607b      	str	r3, [r7, #4]
    if (usart->SR & (1 << 3)) { /* ORE: Overrun error */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <USART3_IRQHandler+0x22>
        usart->DR; /* Đọc DR để xóa cờ ORE */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART3] = UART_IDLE;
 8001fc6:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <USART3_IRQHandler+0xe8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	70da      	strb	r2, [r3, #3]
        return;
 8001fcc:	e05b      	b.n	8002086 <USART3_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 2)) { /* PE: Parity error */
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <USART3_IRQHandler+0x3a>
        usart->DR; /* Đọc DR để xóa cờ PE */
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART3] = UART_IDLE;
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <USART3_IRQHandler+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	70da      	strb	r2, [r3, #3]
        return;
 8001fe4:	e04f      	b.n	8002086 <USART3_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 1)) { /* FE: Framing error */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <USART3_IRQHandler+0x52>
        usart->DR; /* Đọc DR để xóa cờ FE */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
        UartStatus[UART_CHANNEL_USART3] = UART_IDLE;
 8001ff6:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <USART3_IRQHandler+0xe8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	70da      	strb	r2, [r3, #3]
        return;
 8001ffc:	e043      	b.n	8002086 <USART3_IRQHandler+0xda>
    }
    if (usart->SR & (1 << 5) && UartRxIndex[UART_CHANNEL_USART3] < UartRxLength[UART_CHANNEL_USART3]) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01b      	beq.n	8002042 <USART3_IRQHandler+0x96>
 800200a:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <USART3_IRQHandler+0xec>)
 800200c:	78da      	ldrb	r2, [r3, #3]
 800200e:	4b23      	ldr	r3, [pc, #140]	@ (800209c <USART3_IRQHandler+0xf0>)
 8002010:	78db      	ldrb	r3, [r3, #3]
 8002012:	429a      	cmp	r2, r3
 8002014:	d215      	bcs.n	8002042 <USART3_IRQHandler+0x96>
        UartRxBuffer[UART_CHANNEL_USART3][UartRxIndex[UART_CHANNEL_USART3]++] = usart->DR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6858      	ldr	r0, [r3, #4]
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <USART3_IRQHandler+0xf4>)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <USART3_IRQHandler+0xec>)
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	b2cc      	uxtb	r4, r1
 8002026:	491c      	ldr	r1, [pc, #112]	@ (8002098 <USART3_IRQHandler+0xec>)
 8002028:	70cc      	strb	r4, [r1, #3]
 800202a:	4413      	add	r3, r2
 800202c:	b2c2      	uxtb	r2, r0
 800202e:	701a      	strb	r2, [r3, #0]
        if (UartRxIndex[UART_CHANNEL_USART3] >= UartRxLength[UART_CHANNEL_USART3]) {
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <USART3_IRQHandler+0xec>)
 8002032:	78da      	ldrb	r2, [r3, #3]
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <USART3_IRQHandler+0xf0>)
 8002036:	78db      	ldrb	r3, [r3, #3]
 8002038:	429a      	cmp	r2, r3
 800203a:	d302      	bcc.n	8002042 <USART3_IRQHandler+0x96>
            UartStatus[UART_CHANNEL_USART3] = UART_COMPLETED;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <USART3_IRQHandler+0xe8>)
 800203e:	2202      	movs	r2, #2
 8002040:	70da      	strb	r2, [r3, #3]
        }
    }
    if (usart->SR & (1 << 7) && UartTxIndex[UART_CHANNEL_USART3] < UartTxLength[UART_CHANNEL_USART3]) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01b      	beq.n	8002086 <USART3_IRQHandler+0xda>
 800204e:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <USART3_IRQHandler+0xf8>)
 8002050:	78da      	ldrb	r2, [r3, #3]
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <USART3_IRQHandler+0xfc>)
 8002054:	78db      	ldrb	r3, [r3, #3]
 8002056:	429a      	cmp	r2, r3
 8002058:	d215      	bcs.n	8002086 <USART3_IRQHandler+0xda>
        usart->DR = UartTxBuffer[UART_CHANNEL_USART3][UartTxIndex[UART_CHANNEL_USART3]++];
 800205a:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <USART3_IRQHandler+0x100>)
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <USART3_IRQHandler+0xf8>)
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	b2c8      	uxtb	r0, r1
 8002066:	490f      	ldr	r1, [pc, #60]	@ (80020a4 <USART3_IRQHandler+0xf8>)
 8002068:	70c8      	strb	r0, [r1, #3]
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	605a      	str	r2, [r3, #4]
        if (UartTxIndex[UART_CHANNEL_USART3] >= UartTxLength[UART_CHANNEL_USART3]) {
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <USART3_IRQHandler+0xf8>)
 8002076:	78da      	ldrb	r2, [r3, #3]
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <USART3_IRQHandler+0xfc>)
 800207a:	78db      	ldrb	r3, [r3, #3]
 800207c:	429a      	cmp	r2, r3
 800207e:	d302      	bcc.n	8002086 <USART3_IRQHandler+0xda>
            UartStatus[UART_CHANNEL_USART3] = UART_COMPLETED;
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <USART3_IRQHandler+0xe8>)
 8002082:	2202      	movs	r2, #2
 8002084:	70da      	strb	r2, [r3, #3]
        }
    }
}
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bc90      	pop	{r4, r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40004800 	.word	0x40004800
 8002094:	20000088 	.word	0x20000088
 8002098:	200000b0 	.word	0x200000b0
 800209c:	200000a8 	.word	0x200000a8
 80020a0:	20000098 	.word	0x20000098
 80020a4:	200000ac 	.word	0x200000ac
 80020a8:	200000a4 	.word	0x200000a4
 80020ac:	2000008c 	.word	0x2000008c

080020b0 <DMA2_Stream7_IRQHandler>:

/* Xử lý ngắt DMA */
void DMA2_Stream7_IRQHandler(void) { /* USART1 TX */
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
    if (DMA2->HISR & DMA_HISR_TEIF7) { /* Transfer error */
 80020b4:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <DMA2_Stream7_IRQHandler+0x64>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00f      	beq.n	80020e0 <DMA2_Stream7_IRQHandler+0x30>
        DMA2->HIFCR |= DMA_HIFCR_CTEIF7; /* Xóa cờ TE */
 80020c0:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <DMA2_Stream7_IRQHandler+0x64>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a13      	ldr	r2, [pc, #76]	@ (8002114 <DMA2_Stream7_IRQHandler+0x64>)
 80020c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	60d3      	str	r3, [r2, #12]
        DMA2_Stream7->CR &= ~(1 << 0); /* Tắt DMA */
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <DMA2_Stream7_IRQHandler+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a11      	ldr	r2, [pc, #68]	@ (8002118 <DMA2_Stream7_IRQHandler+0x68>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART1] = UART_IDLE;
 80020d8:	4b10      	ldr	r3, [pc, #64]	@ (800211c <DMA2_Stream7_IRQHandler+0x6c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	705a      	strb	r2, [r3, #1]
        return;
 80020de:	e014      	b.n	800210a <DMA2_Stream7_IRQHandler+0x5a>
    }
    if (DMA2->HISR & DMA_HISR_TCIF7) {
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <DMA2_Stream7_IRQHandler+0x64>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <DMA2_Stream7_IRQHandler+0x5a>
        DMA2->HIFCR |= DMA_HIFCR_CTCIF7; /* Xóa cờ TC */
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <DMA2_Stream7_IRQHandler+0x64>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <DMA2_Stream7_IRQHandler+0x64>)
 80020f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80020f6:	60d3      	str	r3, [r2, #12]
        DMA2_Stream7->CR &= ~(1 << 0); /* Tắt DMA */
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <DMA2_Stream7_IRQHandler+0x68>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a06      	ldr	r2, [pc, #24]	@ (8002118 <DMA2_Stream7_IRQHandler+0x68>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART1] = UART_COMPLETED;
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <DMA2_Stream7_IRQHandler+0x6c>)
 8002106:	2202      	movs	r2, #2
 8002108:	705a      	strb	r2, [r3, #1]
    }
}
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40026400 	.word	0x40026400
 8002118:	400264b8 	.word	0x400264b8
 800211c:	20000088 	.word	0x20000088

08002120 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void) { /* USART1 RX */
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
    if (DMA2->HISR & DMA_HISR_TEIF5) { /* Transfer error */
 8002124:	4b17      	ldr	r3, [pc, #92]	@ (8002184 <DMA2_Stream5_IRQHandler+0x64>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00f      	beq.n	8002150 <DMA2_Stream5_IRQHandler+0x30>
        DMA2->HIFCR |= DMA_HIFCR_CTEIF5; /* Xóa cờ TE */
 8002130:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <DMA2_Stream5_IRQHandler+0x64>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a13      	ldr	r2, [pc, #76]	@ (8002184 <DMA2_Stream5_IRQHandler+0x64>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213a:	60d3      	str	r3, [r2, #12]
        DMA2_Stream5->CR &= ~(1 << 0); /* Tắt DMA */
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <DMA2_Stream5_IRQHandler+0x68>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <DMA2_Stream5_IRQHandler+0x68>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART1] = UART_IDLE;
 8002148:	4b10      	ldr	r3, [pc, #64]	@ (800218c <DMA2_Stream5_IRQHandler+0x6c>)
 800214a:	2200      	movs	r2, #0
 800214c:	705a      	strb	r2, [r3, #1]
        return;
 800214e:	e014      	b.n	800217a <DMA2_Stream5_IRQHandler+0x5a>
    }
    if (DMA2->HISR & DMA_HISR_TCIF5) {
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <DMA2_Stream5_IRQHandler+0x64>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00e      	beq.n	800217a <DMA2_Stream5_IRQHandler+0x5a>
        DMA2->HIFCR |= DMA_HIFCR_CTCIF5; /* Xóa cờ TC */
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <DMA2_Stream5_IRQHandler+0x64>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <DMA2_Stream5_IRQHandler+0x64>)
 8002162:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002166:	60d3      	str	r3, [r2, #12]
        DMA2_Stream5->CR &= ~(1 << 0); /* Tắt DMA */
 8002168:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <DMA2_Stream5_IRQHandler+0x68>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a06      	ldr	r2, [pc, #24]	@ (8002188 <DMA2_Stream5_IRQHandler+0x68>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART1] = UART_COMPLETED;
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <DMA2_Stream5_IRQHandler+0x6c>)
 8002176:	2202      	movs	r2, #2
 8002178:	705a      	strb	r2, [r3, #1]
    }
}
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40026400 	.word	0x40026400
 8002188:	40026488 	.word	0x40026488
 800218c:	20000088 	.word	0x20000088

08002190 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void) { /* USART2 TX */
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
    if (DMA1->HISR & DMA_HISR_TEIF6) { /* Transfer error */
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <DMA1_Stream6_IRQHandler+0x64>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00f      	beq.n	80021c0 <DMA1_Stream6_IRQHandler+0x30>
        DMA1->HIFCR |= DMA_HIFCR_CTEIF6; /* Xóa cờ TE */
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <DMA1_Stream6_IRQHandler+0x64>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a13      	ldr	r2, [pc, #76]	@ (80021f4 <DMA1_Stream6_IRQHandler+0x64>)
 80021a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021aa:	60d3      	str	r3, [r2, #12]
        DMA1_Stream6->CR &= ~(1 << 0); /* Tắt DMA */
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <DMA1_Stream6_IRQHandler+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <DMA1_Stream6_IRQHandler+0x68>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART2] = UART_IDLE;
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <DMA1_Stream6_IRQHandler+0x6c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	709a      	strb	r2, [r3, #2]
        return;
 80021be:	e014      	b.n	80021ea <DMA1_Stream6_IRQHandler+0x5a>
    }
    if (DMA1->HISR & DMA_HISR_TCIF6) {
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <DMA1_Stream6_IRQHandler+0x64>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <DMA1_Stream6_IRQHandler+0x5a>
        DMA1->HIFCR |= DMA_HIFCR_CTCIF6; /* Xóa cờ TC */
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <DMA1_Stream6_IRQHandler+0x64>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <DMA1_Stream6_IRQHandler+0x64>)
 80021d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021d6:	60d3      	str	r3, [r2, #12]
        DMA1_Stream6->CR &= ~(1 << 0); /* Tắt DMA */
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <DMA1_Stream6_IRQHandler+0x68>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a06      	ldr	r2, [pc, #24]	@ (80021f8 <DMA1_Stream6_IRQHandler+0x68>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART2] = UART_COMPLETED;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <DMA1_Stream6_IRQHandler+0x6c>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	709a      	strb	r2, [r3, #2]
    }
}
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40026000 	.word	0x40026000
 80021f8:	400260a0 	.word	0x400260a0
 80021fc:	20000088 	.word	0x20000088

08002200 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void) { /* USART2 RX */
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    if (DMA1->HISR & DMA_HISR_TEIF5) { /* Transfer error */
 8002204:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <DMA1_Stream5_IRQHandler+0x64>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00f      	beq.n	8002230 <DMA1_Stream5_IRQHandler+0x30>
        DMA1->HIFCR |= DMA_HIFCR_CTEIF5; /* Xóa cờ TE */
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <DMA1_Stream5_IRQHandler+0x64>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <DMA1_Stream5_IRQHandler+0x64>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221a:	60d3      	str	r3, [r2, #12]
        DMA1_Stream5->CR &= ~(1 << 0); /* Tắt DMA */
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <DMA1_Stream5_IRQHandler+0x68>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a11      	ldr	r2, [pc, #68]	@ (8002268 <DMA1_Stream5_IRQHandler+0x68>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART2] = UART_IDLE;
 8002228:	4b10      	ldr	r3, [pc, #64]	@ (800226c <DMA1_Stream5_IRQHandler+0x6c>)
 800222a:	2200      	movs	r2, #0
 800222c:	709a      	strb	r2, [r3, #2]
        return;
 800222e:	e014      	b.n	800225a <DMA1_Stream5_IRQHandler+0x5a>
    }
    if (DMA1->HISR & DMA_HISR_TCIF5) {
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <DMA1_Stream5_IRQHandler+0x64>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <DMA1_Stream5_IRQHandler+0x5a>
        DMA1->HIFCR |= DMA_HIFCR_CTCIF5; /* Xóa cờ TC */
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <DMA1_Stream5_IRQHandler+0x64>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <DMA1_Stream5_IRQHandler+0x64>)
 8002242:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002246:	60d3      	str	r3, [r2, #12]
        DMA1_Stream5->CR &= ~(1 << 0); /* Tắt DMA */
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <DMA1_Stream5_IRQHandler+0x68>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <DMA1_Stream5_IRQHandler+0x68>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART2] = UART_COMPLETED;
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <DMA1_Stream5_IRQHandler+0x6c>)
 8002256:	2202      	movs	r2, #2
 8002258:	709a      	strb	r2, [r3, #2]
    }
}
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40026000 	.word	0x40026000
 8002268:	40026088 	.word	0x40026088
 800226c:	20000088 	.word	0x20000088

08002270 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void) { /* USART3 TX */
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
    if (DMA1->LISR & DMA_LISR_TEIF3) { /* Transfer error */
 8002274:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <DMA1_Stream3_IRQHandler+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00f      	beq.n	80022a0 <DMA1_Stream3_IRQHandler+0x30>
        DMA1->LIFCR |= DMA_LIFCR_CTEIF3; /* Xóa cờ TE */
 8002280:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <DMA1_Stream3_IRQHandler+0x64>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <DMA1_Stream3_IRQHandler+0x64>)
 8002286:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800228a:	6093      	str	r3, [r2, #8]
        DMA1_Stream3->CR &= ~(1 << 0); /* Tắt DMA */
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <DMA1_Stream3_IRQHandler+0x68>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <DMA1_Stream3_IRQHandler+0x68>)
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART3] = UART_IDLE;
 8002298:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <DMA1_Stream3_IRQHandler+0x6c>)
 800229a:	2200      	movs	r2, #0
 800229c:	70da      	strb	r2, [r3, #3]
        return;
 800229e:	e014      	b.n	80022ca <DMA1_Stream3_IRQHandler+0x5a>
    }
    if (DMA1->LISR & DMA_LISR_TCIF3) {
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <DMA1_Stream3_IRQHandler+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <DMA1_Stream3_IRQHandler+0x5a>
        DMA1->LIFCR |= DMA_LIFCR_CTCIF3; /* Xóa cờ TC */
 80022ac:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <DMA1_Stream3_IRQHandler+0x64>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a08      	ldr	r2, [pc, #32]	@ (80022d4 <DMA1_Stream3_IRQHandler+0x64>)
 80022b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80022b6:	6093      	str	r3, [r2, #8]
        DMA1_Stream3->CR &= ~(1 << 0); /* Tắt DMA */
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <DMA1_Stream3_IRQHandler+0x68>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <DMA1_Stream3_IRQHandler+0x68>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART3] = UART_COMPLETED;
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <DMA1_Stream3_IRQHandler+0x6c>)
 80022c6:	2202      	movs	r2, #2
 80022c8:	70da      	strb	r2, [r3, #3]
    }
}
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40026000 	.word	0x40026000
 80022d8:	40026058 	.word	0x40026058
 80022dc:	20000088 	.word	0x20000088

080022e0 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void) { /* USART3 RX */
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
    if (DMA1->LISR & DMA_LISR_TEIF1) { /* Transfer error */
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <DMA1_Stream1_IRQHandler+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00f      	beq.n	8002310 <DMA1_Stream1_IRQHandler+0x30>
        DMA1->LIFCR |= DMA_LIFCR_CTEIF1; /* Xóa cờ TE */
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <DMA1_Stream1_IRQHandler+0x64>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <DMA1_Stream1_IRQHandler+0x64>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fa:	6093      	str	r3, [r2, #8]
        DMA1_Stream1->CR &= ~(1 << 0); /* Tắt DMA */
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <DMA1_Stream1_IRQHandler+0x68>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <DMA1_Stream1_IRQHandler+0x68>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART3] = UART_IDLE;
 8002308:	4b10      	ldr	r3, [pc, #64]	@ (800234c <DMA1_Stream1_IRQHandler+0x6c>)
 800230a:	2200      	movs	r2, #0
 800230c:	70da      	strb	r2, [r3, #3]
        return;
 800230e:	e014      	b.n	800233a <DMA1_Stream1_IRQHandler+0x5a>
    }
    if (DMA1->LISR & DMA_LISR_TCIF1) {
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <DMA1_Stream1_IRQHandler+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00e      	beq.n	800233a <DMA1_Stream1_IRQHandler+0x5a>
        DMA1->LIFCR |= DMA_LIFCR_CTCIF1; /* Xóa cờ TC */
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <DMA1_Stream1_IRQHandler+0x64>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <DMA1_Stream1_IRQHandler+0x64>)
 8002322:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002326:	6093      	str	r3, [r2, #8]
        DMA1_Stream1->CR &= ~(1 << 0); /* Tắt DMA */
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <DMA1_Stream1_IRQHandler+0x68>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a06      	ldr	r2, [pc, #24]	@ (8002348 <DMA1_Stream1_IRQHandler+0x68>)
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]
        UartStatus[UART_CHANNEL_USART3] = UART_COMPLETED;
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <DMA1_Stream1_IRQHandler+0x6c>)
 8002336:	2202      	movs	r2, #2
 8002338:	70da      	strb	r2, [r3, #3]
    }
}
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40026000 	.word	0x40026000
 8002348:	40026028 	.word	0x40026028
 800234c:	20000088 	.word	0x20000088

08002350 <AdcCanUartTask>:
#include "Mcal_Uart.h"
#include "Mcal_Uart_Cfg.h"
#include "Mcal_Can.h"
#include "Mcal_Can_Cfg.h"

void AdcCanUartTask(void *pvParameters) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b08e      	sub	sp, #56	@ 0x38
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
    Adc_ValueGroupType dataBuffer0[2]; /* ADC1 Group 0 */
    Can_PduType canTxPdu, canRxPdu;
    Uart_DataType uartBuffer[10];

    /* Thiết lập bộ đệm ADC */
    Adc_SetupResultBuffer(ADC_GROUP_0, dataBuffer0);
 8002358:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800235c:	4619      	mov	r1, r3
 800235e:	2000      	movs	r0, #0
 8002360:	f7fe fa04 	bl	800076c <Adc_SetupResultBuffer>

    while (1) {
        /* Bắt đầu chuyển đổi ADC */
        Adc_StartGroupConversion(ADC_GROUP_0);
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fa2b 	bl	80007c0 <Adc_StartGroupConversion>
        while (Adc_GetGroupStatus(ADC_GROUP_0) != ADC_COMPLETED) {
 800236a:	e002      	b.n	8002372 <AdcCanUartTask+0x22>
            vTaskDelay(pdMS_TO_TICKS(10));
 800236c:	200a      	movs	r0, #10
 800236e:	f000 fc35 	bl	8002bdc <vTaskDelay>
        while (Adc_GetGroupStatus(ADC_GROUP_0) != ADC_COMPLETED) {
 8002372:	2000      	movs	r0, #0
 8002374:	f7fe fb32 	bl	80009dc <Adc_GetGroupStatus>
 8002378:	4603      	mov	r3, r0
 800237a:	2b02      	cmp	r3, #2
 800237c:	d1f6      	bne.n	800236c <AdcCanUartTask+0x1c>
        }

        /* Đọc và gửi dữ liệu ADC qua CAN */
        if (Adc_ReadGroup(ADC_GROUP_0, dataBuffer0) == E_OK) {
 800237e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002382:	4619      	mov	r1, r3
 8002384:	2000      	movs	r0, #0
 8002386:	f7fe fa63 	bl	8000850 <Adc_ReadGroup>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d131      	bne.n	80023f4 <AdcCanUartTask+0xa4>
            canTxPdu.Id = 0x100;
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
            canTxPdu.Dlc = 2;
 8002396:	2302      	movs	r3, #2
 8002398:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            canTxPdu.Data[0] = (dataBuffer0[0] >> 8) & 0xFF; /* Byte cao */
 800239c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
            canTxPdu.Data[1] = dataBuffer0[0] & 0xFF; /* Byte thấp */
 80023a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            if (Can_Write(CAN_HW_UNIT_1, &canTxPdu) == E_OK) {
 80023b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b4:	4619      	mov	r1, r3
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe fcc0 	bl	8000d3c <Can_Write>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <AdcCanUartTask+0x86>
                while (Can_GetStatus(CAN_HW_UNIT_1) != CAN_COMPLETED) {
 80023c2:	e002      	b.n	80023ca <AdcCanUartTask+0x7a>
                    vTaskDelay(pdMS_TO_TICKS(10));
 80023c4:	200a      	movs	r0, #10
 80023c6:	f000 fc09 	bl	8002bdc <vTaskDelay>
                while (Can_GetStatus(CAN_HW_UNIT_1) != CAN_COMPLETED) {
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7fe fd76 	bl	8000ebc <Can_GetStatus>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d1f6      	bne.n	80023c4 <AdcCanUartTask+0x74>
                }
            }

            /* Điều khiển LED */
            if (dataBuffer0[0] > 2048) {
 80023d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80023d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023dc:	d905      	bls.n	80023ea <AdcCanUartTask+0x9a>
                Dio_WriteChannel(DIO_CHANNEL_0, STD_HIGH, DIO_PORTA);
 80023de:	2201      	movs	r2, #1
 80023e0:	2101      	movs	r1, #1
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe ff8a 	bl	80012fc <Dio_WriteChannel>
 80023e8:	e004      	b.n	80023f4 <AdcCanUartTask+0xa4>
            } else {
                Dio_WriteChannel(DIO_CHANNEL_0, STD_LOW, DIO_PORTA);
 80023ea:	2201      	movs	r2, #1
 80023ec:	2100      	movs	r1, #0
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe ff84 	bl	80012fc <Dio_WriteChannel>
            }
        }

        /* Đọc dữ liệu từ CAN và gửi qua UART */
        if (Can_GetStatus(CAN_HW_UNIT_1) == CAN_COMPLETED) {
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fd61 	bl	8000ebc <Can_GetStatus>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d12c      	bne.n	800245a <AdcCanUartTask+0x10a>
            if (Can_Read(CAN_HW_UNIT_1, &canRxPdu) == E_OK) {
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	2001      	movs	r0, #1
 8002408:	f7fe fd2c 	bl	8000e64 <Can_Read>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d123      	bne.n	800245a <AdcCanUartTask+0x10a>
                uartBuffer[0] = 'C'; uartBuffer[1] = 'A'; uartBuffer[2] = 'N';
 8002412:	2343      	movs	r3, #67	@ 0x43
 8002414:	723b      	strb	r3, [r7, #8]
 8002416:	2341      	movs	r3, #65	@ 0x41
 8002418:	727b      	strb	r3, [r7, #9]
 800241a:	234e      	movs	r3, #78	@ 0x4e
 800241c:	72bb      	strb	r3, [r7, #10]
                uartBuffer[3] = ':';
 800241e:	233a      	movs	r3, #58	@ 0x3a
 8002420:	72fb      	strb	r3, [r7, #11]
                uartBuffer[4] = canRxPdu.Data[0]; /* Byte cao */
 8002422:	7e7b      	ldrb	r3, [r7, #25]
 8002424:	733b      	strb	r3, [r7, #12]
                uartBuffer[5] = canRxPdu.Data[1]; /* Byte thấp */
 8002426:	7ebb      	ldrb	r3, [r7, #26]
 8002428:	737b      	strb	r3, [r7, #13]
                uartBuffer[6] = '\r'; uartBuffer[7] = '\n';
 800242a:	230d      	movs	r3, #13
 800242c:	73bb      	strb	r3, [r7, #14]
 800242e:	230a      	movs	r3, #10
 8002430:	73fb      	strb	r3, [r7, #15]
                if (Uart_Write(UART_CHANNEL_USART2, uartBuffer, 8) == E_OK) {
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	2208      	movs	r2, #8
 8002438:	4619      	mov	r1, r3
 800243a:	2002      	movs	r0, #2
 800243c:	f7ff fbd0 	bl	8001be0 <Uart_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <AdcCanUartTask+0x10a>
                    while (Uart_GetStatus(UART_CHANNEL_USART2) != UART_COMPLETED) {
 8002446:	e002      	b.n	800244e <AdcCanUartTask+0xfe>
                        vTaskDelay(pdMS_TO_TICKS(10));
 8002448:	200a      	movs	r0, #10
 800244a:	f000 fbc7 	bl	8002bdc <vTaskDelay>
                    while (Uart_GetStatus(UART_CHANNEL_USART2) != UART_COMPLETED) {
 800244e:	2002      	movs	r0, #2
 8002450:	f7ff fc8c 	bl	8001d6c <Uart_GetStatus>
 8002454:	4603      	mov	r3, r0
 8002456:	2b02      	cmp	r3, #2
 8002458:	d1f6      	bne.n	8002448 <AdcCanUartTask+0xf8>
                    }
                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(500));
 800245a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800245e:	f000 fbbd 	bl	8002bdc <vTaskDelay>
        Adc_StartGroupConversion(ADC_GROUP_0);
 8002462:	e77f      	b.n	8002364 <AdcCanUartTask+0x14>

08002464 <main>:
    }
}

int main(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af02      	add	r7, sp, #8
    Dio_Init(DioConfig); /* Khởi tạo DIO */
 800246a:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <main+0x3c>)
 800246c:	f7fe fe60 	bl	8001130 <Dio_Init>
    Adc_Init(AdcConfig); /* Khởi tạo ADC */
 8002470:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <main+0x40>)
 8002472:	f7fd ff9b 	bl	80003ac <Adc_Init>
    Uart_Init(UartConfig); /* Khởi tạo UART */
 8002476:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <main+0x44>)
 8002478:	f7ff f99c 	bl	80017b4 <Uart_Init>
    Can_Init(CanConfig); /* Khởi tạo CAN */
 800247c:	480b      	ldr	r0, [pc, #44]	@ (80024ac <main+0x48>)
 800247e:	f7fe fb71 	bl	8000b64 <Can_Init>

    xTaskCreate(AdcCanUartTask, "AdcCanUartTask", 128, NULL, 1, NULL);
 8002482:	2300      	movs	r3, #0
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2301      	movs	r3, #1
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	2280      	movs	r2, #128	@ 0x80
 800248e:	4908      	ldr	r1, [pc, #32]	@ (80024b0 <main+0x4c>)
 8002490:	4808      	ldr	r0, [pc, #32]	@ (80024b4 <main+0x50>)
 8002492:	f000 fa5c 	bl	800294e <xTaskCreate>
    vTaskStartScheduler();
 8002496:	f000 fbd7 	bl	8002c48 <vTaskStartScheduler>

    while (1) {
 800249a:	bf00      	nop
 800249c:	e7fd      	b.n	800249a <main+0x36>
 800249e:	bf00      	nop
 80024a0:	08003be4 	.word	0x08003be4
 80024a4:	08003b68 	.word	0x08003b68
 80024a8:	08003c1c 	.word	0x08003c1c
 80024ac:	08003bb0 	.word	0x08003bb0
 80024b0:	08003b40 	.word	0x08003b40
 80024b4:	08002351 	.word	0x08002351

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <NMI_Handler+0x4>

080024c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <MemManage_Handler+0x4>

080024d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <UsageFault_Handler+0x4>

080024e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024f4:	4802      	ldr	r0, [pc, #8]	@ (8002500 <TIM6_DAC_IRQHandler+0x10>)
 80024f6:	f000 f840 	bl	800257a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200000b8 	.word	0x200000b8

08002504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002528:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002560 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800252c:	f7ff ffea 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002530:	480c      	ldr	r0, [pc, #48]	@ (8002564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002532:	490d      	ldr	r1, [pc, #52]	@ (8002568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002534:	4a0d      	ldr	r2, [pc, #52]	@ (800256c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002538:	e002      	b.n	8002540 <LoopCopyDataInit>

0800253a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800253c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253e:	3304      	adds	r3, #4

08002540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002544:	d3f9      	bcc.n	800253a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002548:	4c0a      	ldr	r4, [pc, #40]	@ (8002574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800254c:	e001      	b.n	8002552 <LoopFillZerobss>

0800254e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002550:	3204      	adds	r2, #4

08002552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002554:	d3fb      	bcc.n	800254e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002556:	f001 fac3 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800255a:	f7ff ff83 	bl	8002464 <main>
  bx  lr    
 800255e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002560:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002568:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800256c:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 8002570:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002574:	20012e2c 	.word	0x20012e2c

08002578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002578:	e7fe      	b.n	8002578 <ADC_IRQHandler>

0800257a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01b      	beq.n	80025de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0202 	mvn.w	r2, #2
 80025ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8dc 	bl	8002782 <HAL_TIM_IC_CaptureCallback>
 80025ca:	e005      	b.n	80025d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8ce 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8df 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01b      	beq.n	800262a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0204 	mvn.w	r2, #4
 80025fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8b6 	bl	8002782 <HAL_TIM_IC_CaptureCallback>
 8002616:	e005      	b.n	8002624 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8a8 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8b9 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01b      	beq.n	8002676 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0208 	mvn.w	r2, #8
 8002646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2204      	movs	r2, #4
 800264c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f890 	bl	8002782 <HAL_TIM_IC_CaptureCallback>
 8002662:	e005      	b.n	8002670 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f882 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f893 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01b      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0210 	mvn.w	r2, #16
 8002692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2208      	movs	r2, #8
 8002698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f86a 	bl	8002782 <HAL_TIM_IC_CaptureCallback>
 80026ae:	e005      	b.n	80026bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f85c 	bl	800276e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f86d 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f06f 0201 	mvn.w	r2, #1
 80026de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f83a 	bl	800275a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f864 	bl	80027d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f83e 	bl	80027aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0220 	mvn.w	r2, #32
 800274a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f836 	bl	80027be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f103 0208 	add.w	r2, r3, #8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f04f 32ff 	mov.w	r2, #4294967295
 80027fe:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f103 0208 	add.w	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f103 0208 	add.w	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	601a      	str	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d103      	bne.n	80028a8 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e00c      	b.n	80028c2 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3308      	adds	r3, #8
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	e002      	b.n	80028b6 <vListInsert+0x2e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d2f6      	bcs.n	80028b0 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6852      	ldr	r2, [r2, #4]
 800291a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	d103      	bne.n	800292e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800294e:	b580      	push	{r7, lr}
 8002950:	b08c      	sub	sp, #48	@ 0x30
 8002952:	af04      	add	r7, sp, #16
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f000 feb2 	bl	80036cc <pvPortMalloc>
 8002968:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002970:	2058      	movs	r0, #88	@ 0x58
 8002972:	f000 feab 	bl	80036cc <pvPortMalloc>
 8002976:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
 8002984:	e005      	b.n	8002992 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f000 ff82 	bl	8003890 <vPortFree>
 800298c:	e001      	b.n	8002992 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	2300      	movs	r3, #0
 800299c:	9303      	str	r3, [sp, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f80e 	bl	80029d0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029b4:	69f8      	ldr	r0, [r7, #28]
 80029b6:	f000 f8a3 	bl	8002b00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e002      	b.n	80029c6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029c6:	69bb      	ldr	r3, [r7, #24]
    }
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	21a5      	movs	r1, #165	@ 0xa5
 80029ea:	f001 f871 	bl	8003ad0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f8:	3b01      	subs	r3, #1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <prvInitialiseNewTask+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01f      	beq.n	8002a70 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e012      	b.n	8002a5c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	7819      	ldrb	r1, [r3, #0]
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	3334      	adds	r3, #52	@ 0x34
 8002a46:	460a      	mov	r2, r1
 8002a48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	d9e9      	bls.n	8002a36 <prvInitialiseNewTask+0x66>
 8002a62:	e000      	b.n	8002a66 <prvInitialiseNewTask+0x96>
            {
                break;
 8002a64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a6e:	e003      	b.n	8002a78 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d901      	bls.n	8002a82 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a8c:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	3304      	adds	r3, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fec4 	bl	8002826 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff febf 	bl	8002826 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab0:	f1c3 0205 	rsb	r2, r3, #5
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	3350      	adds	r3, #80	@ 0x50
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f802 	bl	8003ad0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ace:	3354      	adds	r3, #84	@ 0x54
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fffb 	bl	8003ad0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	68f9      	ldr	r1, [r7, #12]
 8002ade:	69b8      	ldr	r0, [r7, #24]
 8002ae0:	f000 fbd8 	bl	8003294 <pxPortInitialiseStack>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002af6:	bf00      	nop
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b08:	f000 fcf8 	bl	80034fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc0 <prvAddNewTaskToReadyList+0xc0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc0 <prvAddNewTaskToReadyList+0xc0>)
 8002b14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b16:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b1e:	4a29      	ldr	r2, [pc, #164]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b24:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <prvAddNewTaskToReadyList+0xc0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d110      	bne.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b2c:	f000 fab2 	bl	8003094 <prvInitialiseTaskLists>
 8002b30:	e00d      	b.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b32:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <prvAddNewTaskToReadyList+0xc8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d802      	bhi.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b48:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <prvAddNewTaskToReadyList+0xcc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a1d      	ldr	r2, [pc, #116]	@ (8002bcc <prvAddNewTaskToReadyList+0xcc>)
 8002b56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b58:	4b1c      	ldr	r3, [pc, #112]	@ (8002bcc <prvAddNewTaskToReadyList+0xcc>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	2201      	movs	r2, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <prvAddNewTaskToReadyList+0xd0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	4a18      	ldr	r2, [pc, #96]	@ (8002bd0 <prvAddNewTaskToReadyList+0xd0>)
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4a15      	ldr	r2, [pc, #84]	@ (8002bd4 <prvAddNewTaskToReadyList+0xd4>)
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f7ff fe59 	bl	8002840 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b8e:	f000 fce7 	bl	8003560 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <prvAddNewTaskToReadyList+0xc8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d207      	bcs.n	8002bb8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <prvAddNewTaskToReadyList+0xd8>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200001d8 	.word	0x200001d8
 8002bc4:	20000100 	.word	0x20000100
 8002bc8:	200001e4 	.word	0x200001e4
 8002bcc:	200001f4 	.word	0x200001f4
 8002bd0:	200001e0 	.word	0x200001e0
 8002bd4:	20000104 	.word	0x20000104
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <vTaskDelay+0x64>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <vTaskDelay+0x32>
        __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	60bb      	str	r3, [r7, #8]
    }
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	e7fd      	b.n	8002c0a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002c0e:	f000 f867 	bl	8002ce0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c12:	2100      	movs	r1, #0
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fad7 	bl	80031c8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c1a:	f000 f86f 	bl	8002cfc <xTaskResumeAll>
 8002c1e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8002c26:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <vTaskDelay+0x68>)
 8002c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000200 	.word	0x20000200
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <vTaskStartScheduler+0x7c>)
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2300      	movs	r3, #0
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	2282      	movs	r2, #130	@ 0x82
 8002c5a:	491b      	ldr	r1, [pc, #108]	@ (8002cc8 <vTaskStartScheduler+0x80>)
 8002c5c:	481b      	ldr	r0, [pc, #108]	@ (8002ccc <vTaskStartScheduler+0x84>)
 8002c5e:	f7ff fe76 	bl	800294e <xTaskCreate>
 8002c62:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d116      	bne.n	8002c98 <vTaskStartScheduler+0x50>
        __asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	60bb      	str	r3, [r7, #8]
    }
 8002c7c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <vTaskStartScheduler+0x88>)
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c86:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <vTaskStartScheduler+0x8c>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <vTaskStartScheduler+0x90>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002c92:	f000 fb8f 	bl	80033b4 <xPortStartScheduler>
 8002c96:	e00f      	b.n	8002cb8 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d10b      	bne.n	8002cb8 <vTaskStartScheduler+0x70>
        __asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	607b      	str	r3, [r7, #4]
    }
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <vTaskStartScheduler+0x94>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200001fc 	.word	0x200001fc
 8002cc8:	08003b50 	.word	0x08003b50
 8002ccc:	08003065 	.word	0x08003065
 8002cd0:	200001f8 	.word	0x200001f8
 8002cd4:	200001e4 	.word	0x200001e4
 8002cd8:	200001dc 	.word	0x200001dc
 8002cdc:	20000010 	.word	0x20000010

08002ce0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <vTaskSuspendAll+0x18>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a03      	ldr	r2, [pc, #12]	@ (8002cf8 <vTaskSuspendAll+0x18>)
 8002cec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	20000200 	.word	0x20000200

08002cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d0a:	4b42      	ldr	r3, [pc, #264]	@ (8002e14 <xTaskResumeAll+0x118>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <xTaskResumeAll+0x2e>
        __asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	603b      	str	r3, [r7, #0]
    }
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	e7fd      	b.n	8002d26 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d2a:	f000 fbe7 	bl	80034fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d2e:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <xTaskResumeAll+0x118>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a37      	ldr	r2, [pc, #220]	@ (8002e14 <xTaskResumeAll+0x118>)
 8002d36:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d38:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <xTaskResumeAll+0x118>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d161      	bne.n	8002e04 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d40:	4b35      	ldr	r3, [pc, #212]	@ (8002e18 <xTaskResumeAll+0x11c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d05d      	beq.n	8002e04 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d48:	e02e      	b.n	8002da8 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4a:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <xTaskResumeAll+0x120>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3318      	adds	r3, #24
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fdcf 	bl	80028fa <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fdca 	bl	80028fa <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e20 <xTaskResumeAll+0x124>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	4a2a      	ldr	r2, [pc, #168]	@ (8002e20 <xTaskResumeAll+0x124>)
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a27      	ldr	r2, [pc, #156]	@ (8002e24 <xTaskResumeAll+0x128>)
 8002d86:	441a      	add	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f7ff fd56 	bl	8002840 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d98:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <xTaskResumeAll+0x12c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <xTaskResumeAll+0x130>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002da8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <xTaskResumeAll+0x120>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1cc      	bne.n	8002d4a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002db6:	f000 f9eb 	bl	8003190 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dba:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <xTaskResumeAll+0x134>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002dc6:	f000 f837 	bl	8002e38 <xTaskIncrementTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <xTaskResumeAll+0x130>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f1      	bne.n	8002dc6 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8002de2:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <xTaskResumeAll+0x134>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002de8:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <xTaskResumeAll+0x130>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002df4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <xTaskResumeAll+0x138>)
 8002df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e04:	f000 fbac 	bl	8003560 <vPortExitCritical>

    return xAlreadyYielded;
 8002e08:	68bb      	ldr	r3, [r7, #8]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000200 	.word	0x20000200
 8002e18:	200001d8 	.word	0x200001d8
 8002e1c:	20000198 	.word	0x20000198
 8002e20:	200001e0 	.word	0x200001e0
 8002e24:	20000104 	.word	0x20000104
 8002e28:	20000100 	.word	0x20000100
 8002e2c:	200001ec 	.word	0x200001ec
 8002e30:	200001e8 	.word	0x200001e8
 8002e34:	e000ed04 	.word	0xe000ed04

08002e38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e42:	4b4f      	ldr	r3, [pc, #316]	@ (8002f80 <xTaskIncrementTick+0x148>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 808f 	bne.w	8002f6a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f84 <xTaskIncrementTick+0x14c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e54:	4a4b      	ldr	r2, [pc, #300]	@ (8002f84 <xTaskIncrementTick+0x14c>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d121      	bne.n	8002ea4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e60:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <xTaskIncrementTick+0x150>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	603b      	str	r3, [r7, #0]
    }
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	e7fd      	b.n	8002e7e <xTaskIncrementTick+0x46>
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <xTaskIncrementTick+0x150>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <xTaskIncrementTick+0x154>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f88 <xTaskIncrementTick+0x150>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4a3e      	ldr	r2, [pc, #248]	@ (8002f8c <xTaskIncrementTick+0x154>)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b3e      	ldr	r3, [pc, #248]	@ (8002f90 <xTaskIncrementTick+0x158>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f90 <xTaskIncrementTick+0x158>)
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	f000 f976 	bl	8003190 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <xTaskIncrementTick+0x15c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d348      	bcc.n	8002f40 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eae:	4b36      	ldr	r3, [pc, #216]	@ (8002f88 <xTaskIncrementTick+0x150>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <xTaskIncrementTick+0x15c>)
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	601a      	str	r2, [r3, #0]
                    break;
 8002ec0:	e03e      	b.n	8002f40 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ec2:	4b31      	ldr	r3, [pc, #196]	@ (8002f88 <xTaskIncrementTick+0x150>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d203      	bcs.n	8002ee2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002eda:	4a2e      	ldr	r2, [pc, #184]	@ (8002f94 <xTaskIncrementTick+0x15c>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ee0:	e02e      	b.n	8002f40 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fd07 	bl	80028fa <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fcfe 	bl	80028fa <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	2201      	movs	r2, #1
 8002f04:	409a      	lsls	r2, r3
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <xTaskIncrementTick+0x160>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <xTaskIncrementTick+0x160>)
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f9c <xTaskIncrementTick+0x164>)
 8002f1e:	441a      	add	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f7ff fc8a 	bl	8002840 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f30:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <xTaskIncrementTick+0x168>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3b9      	bcc.n	8002eae <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3e:	e7b6      	b.n	8002eae <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f40:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <xTaskIncrementTick+0x168>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f46:	4915      	ldr	r1, [pc, #84]	@ (8002f9c <xTaskIncrementTick+0x164>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d901      	bls.n	8002f5c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <xTaskIncrementTick+0x16c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e004      	b.n	8002f74 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa8 <xTaskIncrementTick+0x170>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa8 <xTaskIncrementTick+0x170>)
 8002f72:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f74:	697b      	ldr	r3, [r7, #20]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000200 	.word	0x20000200
 8002f84:	200001dc 	.word	0x200001dc
 8002f88:	20000190 	.word	0x20000190
 8002f8c:	20000194 	.word	0x20000194
 8002f90:	200001f0 	.word	0x200001f0
 8002f94:	200001f8 	.word	0x200001f8
 8002f98:	200001e0 	.word	0x200001e0
 8002f9c:	20000104 	.word	0x20000104
 8002fa0:	20000100 	.word	0x20000100
 8002fa4:	200001ec 	.word	0x200001ec
 8002fa8:	200001e8 	.word	0x200001e8

08002fac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fb2:	4b27      	ldr	r3, [pc, #156]	@ (8003050 <vTaskSwitchContext+0xa4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fba:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <vTaskSwitchContext+0xa8>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fc0:	e040      	b.n	8003044 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <vTaskSwitchContext+0xa8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc8:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <vTaskSwitchContext+0xac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f1c3 031f 	rsb	r3, r3, #31
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	491f      	ldr	r1, [pc, #124]	@ (800305c <vTaskSwitchContext+0xb0>)
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10b      	bne.n	800300a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	607b      	str	r3, [r7, #4]
    }
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <vTaskSwitchContext+0x5a>
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4a11      	ldr	r2, [pc, #68]	@ (800305c <vTaskSwitchContext+0xb0>)
 8003016:	4413      	add	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3308      	adds	r3, #8
 800302c:	429a      	cmp	r2, r3
 800302e:	d104      	bne.n	800303a <vTaskSwitchContext+0x8e>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a07      	ldr	r2, [pc, #28]	@ (8003060 <vTaskSwitchContext+0xb4>)
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	20000200 	.word	0x20000200
 8003054:	200001ec 	.word	0x200001ec
 8003058:	200001e0 	.word	0x200001e0
 800305c:	20000104 	.word	0x20000104
 8003060:	20000100 	.word	0x20000100

08003064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800306c:	f000 f852 	bl	8003114 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <prvIdleTask+0x28>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d9f9      	bls.n	800306c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <prvIdleTask+0x2c>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003088:	e7f0      	b.n	800306c <prvIdleTask+0x8>
 800308a:	bf00      	nop
 800308c:	20000104 	.word	0x20000104
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e00c      	b.n	80030ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <prvInitialiseTaskLists+0x60>)
 80030ac:	4413      	add	r3, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fb99 	bl	80027e6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3301      	adds	r3, #1
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d9ef      	bls.n	80030a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030c0:	480d      	ldr	r0, [pc, #52]	@ (80030f8 <prvInitialiseTaskLists+0x64>)
 80030c2:	f7ff fb90 	bl	80027e6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030c6:	480d      	ldr	r0, [pc, #52]	@ (80030fc <prvInitialiseTaskLists+0x68>)
 80030c8:	f7ff fb8d 	bl	80027e6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030cc:	480c      	ldr	r0, [pc, #48]	@ (8003100 <prvInitialiseTaskLists+0x6c>)
 80030ce:	f7ff fb8a 	bl	80027e6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80030d2:	480c      	ldr	r0, [pc, #48]	@ (8003104 <prvInitialiseTaskLists+0x70>)
 80030d4:	f7ff fb87 	bl	80027e6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80030d8:	480b      	ldr	r0, [pc, #44]	@ (8003108 <prvInitialiseTaskLists+0x74>)
 80030da:	f7ff fb84 	bl	80027e6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <prvInitialiseTaskLists+0x78>)
 80030e0:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <prvInitialiseTaskLists+0x64>)
 80030e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <prvInitialiseTaskLists+0x7c>)
 80030e6:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <prvInitialiseTaskLists+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000104 	.word	0x20000104
 80030f8:	20000168 	.word	0x20000168
 80030fc:	2000017c 	.word	0x2000017c
 8003100:	20000198 	.word	0x20000198
 8003104:	200001ac 	.word	0x200001ac
 8003108:	200001c4 	.word	0x200001c4
 800310c:	20000190 	.word	0x20000190
 8003110:	20000194 	.word	0x20000194

08003114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800311a:	e019      	b.n	8003150 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800311c:	f000 f9ee 	bl	80034fc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003120:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <prvCheckTasksWaitingTermination+0x50>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fbe4 	bl	80028fa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <prvCheckTasksWaitingTermination+0x54>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3b01      	subs	r3, #1
 8003138:	4a0b      	ldr	r2, [pc, #44]	@ (8003168 <prvCheckTasksWaitingTermination+0x54>)
 800313a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <prvCheckTasksWaitingTermination+0x58>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3b01      	subs	r3, #1
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <prvCheckTasksWaitingTermination+0x58>)
 8003144:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003146:	f000 fa0b 	bl	8003560 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f810 	bl	8003170 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <prvCheckTasksWaitingTermination+0x58>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e1      	bne.n	800311c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200001ac 	.word	0x200001ac
 8003168:	200001d8 	.word	0x200001d8
 800316c:	200001c0 	.word	0x200001c0

08003170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fb87 	bl	8003890 <vPortFree>
                vPortFree( pxTCB );
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb84 	bl	8003890 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <prvResetNextTaskUnblockTime+0x30>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <prvResetNextTaskUnblockTime+0x34>)
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031a6:	e005      	b.n	80031b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <prvResetNextTaskUnblockTime+0x30>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <prvResetNextTaskUnblockTime+0x34>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000190 	.word	0x20000190
 80031c4:	200001f8 	.word	0x200001f8

080031c8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80031d2:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <prvAddCurrentTaskToDelayedList+0xb0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d8:	4b28      	ldr	r3, [pc, #160]	@ (800327c <prvAddCurrentTaskToDelayedList+0xb4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3304      	adds	r3, #4
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fb8b 	bl	80028fa <uxListRemove>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031ea:	4b24      	ldr	r3, [pc, #144]	@ (800327c <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	2201      	movs	r2, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	4b21      	ldr	r3, [pc, #132]	@ (8003280 <prvAddCurrentTaskToDelayedList+0xb8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4013      	ands	r3, r2
 80031fe:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003200:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d10a      	bne.n	8003220 <prvAddCurrentTaskToDelayedList+0x58>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003210:	4b1a      	ldr	r3, [pc, #104]	@ (800327c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3304      	adds	r3, #4
 8003216:	4619      	mov	r1, r3
 8003218:	481a      	ldr	r0, [pc, #104]	@ (8003284 <prvAddCurrentTaskToDelayedList+0xbc>)
 800321a:	f7ff fb11 	bl	8002840 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800321e:	e026      	b.n	800326e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003228:	4b14      	ldr	r3, [pc, #80]	@ (800327c <prvAddCurrentTaskToDelayedList+0xb4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d209      	bcs.n	800324c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003238:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <prvAddCurrentTaskToDelayedList+0xc0>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <prvAddCurrentTaskToDelayedList+0xb4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7ff fb1f 	bl	8002888 <vListInsert>
}
 800324a:	e010      	b.n	800326e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800324c:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <prvAddCurrentTaskToDelayedList+0xc4>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7ff fb15 	bl	8002888 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800325e:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	d202      	bcs.n	800326e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003268:	4a09      	ldr	r2, [pc, #36]	@ (8003290 <prvAddCurrentTaskToDelayedList+0xc8>)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6013      	str	r3, [r2, #0]
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200001dc 	.word	0x200001dc
 800327c:	20000100 	.word	0x20000100
 8003280:	200001e0 	.word	0x200001e0
 8003284:	200001c4 	.word	0x200001c4
 8003288:	20000194 	.word	0x20000194
 800328c:	20000190 	.word	0x20000190
 8003290:	200001f8 	.word	0x200001f8

08003294 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b04      	subs	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3b04      	subs	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3b04      	subs	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80032c4:	4a0c      	ldr	r2, [pc, #48]	@ (80032f8 <pxPortInitialiseStack+0x64>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3b14      	subs	r3, #20
 80032ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b04      	subs	r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f06f 0202 	mvn.w	r2, #2
 80032e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3b20      	subs	r3, #32
 80032e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	080032fd 	.word	0x080032fd

080032fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003306:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <prvTaskExitError+0x58>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d00b      	beq.n	8003328 <prvTaskExitError+0x2c>
        __asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
    }
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <prvTaskExitError+0x28>
        __asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	60bb      	str	r3, [r7, #8]
    }
 800333a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800333c:	bf00      	nop
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0fc      	beq.n	800333e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000014 	.word	0x20000014
	...

08003360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003360:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <pxCurrentTCBConst2>)
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	6808      	ldr	r0, [r1, #0]
 8003366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336a:	f380 8809 	msr	PSP, r0
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f380 8811 	msr	BASEPRI, r0
 800337a:	4770      	bx	lr
 800337c:	f3af 8000 	nop.w

08003380 <pxCurrentTCBConst2>:
 8003380:	20000100 	.word	0x20000100
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop

08003388 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003388:	4808      	ldr	r0, [pc, #32]	@ (80033ac <prvPortStartFirstTask+0x24>)
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	6800      	ldr	r0, [r0, #0]
 800338e:	f380 8808 	msr	MSP, r0
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f380 8814 	msr	CONTROL, r0
 800339a:	b662      	cpsie	i
 800339c:	b661      	cpsie	f
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	df00      	svc	0
 80033a8:	bf00      	nop
 80033aa:	0000      	.short	0x0000
 80033ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop

080033b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033ba:	4b47      	ldr	r3, [pc, #284]	@ (80034d8 <xPortStartScheduler+0x124>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a47      	ldr	r2, [pc, #284]	@ (80034dc <xPortStartScheduler+0x128>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10b      	bne.n	80033dc <xPortStartScheduler+0x28>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	613b      	str	r3, [r7, #16]
    }
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033dc:	4b3e      	ldr	r3, [pc, #248]	@ (80034d8 <xPortStartScheduler+0x124>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3f      	ldr	r2, [pc, #252]	@ (80034e0 <xPortStartScheduler+0x12c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10b      	bne.n	80033fe <xPortStartScheduler+0x4a>
        __asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60fb      	str	r3, [r7, #12]
    }
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	e7fd      	b.n	80033fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033fe:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <xPortStartScheduler+0x130>)
 8003400:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	22ff      	movs	r2, #255	@ 0xff
 800340e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <xPortStartScheduler+0x134>)
 8003424:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003426:	4b31      	ldr	r3, [pc, #196]	@ (80034ec <xPortStartScheduler+0x138>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800342c:	e009      	b.n	8003442 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800342e:	4b2f      	ldr	r3, [pc, #188]	@ (80034ec <xPortStartScheduler+0x138>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	4a2d      	ldr	r2, [pc, #180]	@ (80034ec <xPortStartScheduler+0x138>)
 8003436:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d0ef      	beq.n	800342e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800344e:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <xPortStartScheduler+0x138>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00b      	beq.n	8003472 <xPortStartScheduler+0xbe>
        __asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60bb      	str	r3, [r7, #8]
    }
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <xPortStartScheduler+0x138>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <xPortStartScheduler+0x138>)
 800347a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800347c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <xPortStartScheduler+0x138>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003484:	4a19      	ldr	r2, [pc, #100]	@ (80034ec <xPortStartScheduler+0x138>)
 8003486:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003490:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <xPortStartScheduler+0x13c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <xPortStartScheduler+0x13c>)
 8003496:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800349a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <xPortStartScheduler+0x13c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <xPortStartScheduler+0x13c>)
 80034a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80034a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80034a8:	f000 f8e0 	bl	800366c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <xPortStartScheduler+0x140>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80034b2:	f000 f8ff 	bl	80036b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <xPortStartScheduler+0x144>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a0f      	ldr	r2, [pc, #60]	@ (80034f8 <xPortStartScheduler+0x144>)
 80034bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80034c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80034c2:	f7ff ff61 	bl	8003388 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034c6:	f7ff fd71 	bl	8002fac <vTaskSwitchContext>
    prvTaskExitError();
 80034ca:	f7ff ff17 	bl	80032fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	e000ed00 	.word	0xe000ed00
 80034dc:	410fc271 	.word	0x410fc271
 80034e0:	410fc270 	.word	0x410fc270
 80034e4:	e000e400 	.word	0xe000e400
 80034e8:	20000204 	.word	0x20000204
 80034ec:	20000208 	.word	0x20000208
 80034f0:	e000ed20 	.word	0xe000ed20
 80034f4:	20000014 	.word	0x20000014
 80034f8:	e000ef34 	.word	0xe000ef34

080034fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	607b      	str	r3, [r7, #4]
    }
 8003514:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <vPortEnterCritical+0x5c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	4a0e      	ldr	r2, [pc, #56]	@ (8003558 <vPortEnterCritical+0x5c>)
 800351e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003520:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <vPortEnterCritical+0x5c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d110      	bne.n	800354a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003528:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <vPortEnterCritical+0x60>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <vPortEnterCritical+0x4e>
        __asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	603b      	str	r3, [r7, #0]
    }
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <vPortEnterCritical+0x4a>
    }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000014 	.word	0x20000014
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003566:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <vPortExitCritical+0x50>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <vPortExitCritical+0x26>
        __asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	607b      	str	r3, [r7, #4]
    }
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	e7fd      	b.n	8003582 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003586:	4b0a      	ldr	r3, [pc, #40]	@ (80035b0 <vPortExitCritical+0x50>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	4a08      	ldr	r2, [pc, #32]	@ (80035b0 <vPortExitCritical+0x50>)
 800358e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003590:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <vPortExitCritical+0x50>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <vPortExitCritical+0x44>
 8003598:	2300      	movs	r3, #0
 800359a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035a2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20000014 	.word	0x20000014
	...

080035c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80035c0:	f3ef 8009 	mrs	r0, PSP
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <pxCurrentTCBConst>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	f01e 0f10 	tst.w	lr, #16
 80035d0:	bf08      	it	eq
 80035d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035da:	6010      	str	r0, [r2, #0]
 80035dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80035e4:	f380 8811 	msr	BASEPRI, r0
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f7ff fcdc 	bl	8002fac <vTaskSwitchContext>
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f380 8811 	msr	BASEPRI, r0
 80035fc:	bc09      	pop	{r0, r3}
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	6808      	ldr	r0, [r1, #0]
 8003602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003606:	f01e 0f10 	tst.w	lr, #16
 800360a:	bf08      	it	eq
 800360c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003610:	f380 8809 	msr	PSP, r0
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	f3af 8000 	nop.w

08003620 <pxCurrentTCBConst>:
 8003620:	20000100 	.word	0x20000100
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop

08003628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
        __asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	607b      	str	r3, [r7, #4]
    }
 8003640:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003642:	f7ff fbf9 	bl	8002e38 <xTaskIncrementTick>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <SysTick_Handler+0x40>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f383 8811 	msr	BASEPRI, r3
    }
 800365e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003676:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <vPortSetupTimerInterrupt+0x38>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <vPortSetupTimerInterrupt+0x3c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <vPortSetupTimerInterrupt+0x40>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	4a09      	ldr	r2, [pc, #36]	@ (80036b0 <vPortSetupTimerInterrupt+0x44>)
 800368a:	3b01      	subs	r3, #1
 800368c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <vPortSetupTimerInterrupt+0x34>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010
 80036a4:	e000e018 	.word	0xe000e018
 80036a8:	2000000c 	.word	0x2000000c
 80036ac:	10624dd3 	.word	0x10624dd3
 80036b0:	e000e014 	.word	0xe000e014

080036b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80036b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80036c4 <vPortEnableVFP+0x10>
 80036b8:	6801      	ldr	r1, [r0, #0]
 80036ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80036be:	6001      	str	r1, [r0, #0]
 80036c0:	4770      	bx	lr
 80036c2:	0000      	.short	0x0000
 80036c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop

080036cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80036d8:	f7ff fb02 	bl	8002ce0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80036dc:	4b66      	ldr	r3, [pc, #408]	@ (8003878 <pvPortMalloc+0x1ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80036e4:	f000 f938 	bl	8003958 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036e8:	4b64      	ldr	r3, [pc, #400]	@ (800387c <pvPortMalloc+0x1b0>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 80a9 	bne.w	8003848 <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02e      	beq.n	800375a <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80036fc:	2208      	movs	r2, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d228      	bcs.n	800375a <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8003708:	2208      	movs	r2, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	2b00      	cmp	r3, #0
 8003718:	d022      	beq.n	8003760 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f023 0307 	bic.w	r3, r3, #7
 8003720:	3308      	adds	r3, #8
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d215      	bcs.n	8003754 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f023 0307 	bic.w	r3, r3, #7
 800372e:	3308      	adds	r3, #8
 8003730:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <pvPortMalloc+0x94>
        __asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	617b      	str	r3, [r7, #20]
    }
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003758:	e002      	b.n	8003760 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e000      	b.n	8003762 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003760:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d06f      	beq.n	8003848 <pvPortMalloc+0x17c>
 8003768:	4b45      	ldr	r3, [pc, #276]	@ (8003880 <pvPortMalloc+0x1b4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d86a      	bhi.n	8003848 <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003772:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <pvPortMalloc+0x1b8>)
 8003774:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003776:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <pvPortMalloc+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800377c:	e004      	b.n	8003788 <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d903      	bls.n	800379a <pvPortMalloc+0xce>
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f1      	bne.n	800377e <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800379a:	4b37      	ldr	r3, [pc, #220]	@ (8003878 <pvPortMalloc+0x1ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d051      	beq.n	8003848 <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	4413      	add	r3, r2
 80037ac:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad2      	subs	r2, r2, r3
 80037be:	2308      	movs	r3, #8
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d920      	bls.n	8003808 <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <pvPortMalloc+0x124>
        __asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	613b      	str	r3, [r7, #16]
    }
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003802:	69b8      	ldr	r0, [r7, #24]
 8003804:	f000 f90a 	bl	8003a1c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <pvPortMalloc+0x1b4>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <pvPortMalloc+0x1b4>)
 8003814:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003816:	4b1a      	ldr	r3, [pc, #104]	@ (8003880 <pvPortMalloc+0x1b4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <pvPortMalloc+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d203      	bcs.n	800382a <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003822:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <pvPortMalloc+0x1b4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <pvPortMalloc+0x1bc>)
 8003828:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <pvPortMalloc+0x1b0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	431a      	orrs	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800383e:	4b13      	ldr	r3, [pc, #76]	@ (800388c <pvPortMalloc+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	4a11      	ldr	r2, [pc, #68]	@ (800388c <pvPortMalloc+0x1c0>)
 8003846:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003848:	f7ff fa58 	bl	8002cfc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <pvPortMalloc+0x1a2>
        __asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	60fb      	str	r3, [r7, #12]
    }
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	e7fd      	b.n	800386a <pvPortMalloc+0x19e>
    return pvReturn;
 800386e:	69fb      	ldr	r3, [r7, #28]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	@ 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20012e14 	.word	0x20012e14
 800387c:	20012e28 	.word	0x20012e28
 8003880:	20012e18 	.word	0x20012e18
 8003884:	20012e0c 	.word	0x20012e0c
 8003888:	20012e1c 	.word	0x20012e1c
 800388c:	20012e20 	.word	0x20012e20

08003890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04f      	beq.n	8003942 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038a2:	2308      	movs	r3, #8
 80038a4:	425b      	negs	r3, r3
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4413      	add	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <vPortFree+0xbc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <vPortFree+0x46>
        __asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60fb      	str	r3, [r7, #12]
    }
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <vPortFree+0x66>
        __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60bb      	str	r3, [r7, #8]
    }
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b14      	ldr	r3, [pc, #80]	@ (800394c <vPortFree+0xbc>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01e      	beq.n	8003942 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11a      	bne.n	8003942 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4b0e      	ldr	r3, [pc, #56]	@ (800394c <vPortFree+0xbc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	43db      	mvns	r3, r3
 8003916:	401a      	ands	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800391c:	f7ff f9e0 	bl	8002ce0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <vPortFree+0xc0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4413      	add	r3, r2
 800392a:	4a09      	ldr	r2, [pc, #36]	@ (8003950 <vPortFree+0xc0>)
 800392c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800392e:	6938      	ldr	r0, [r7, #16]
 8003930:	f000 f874 	bl	8003a1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <vPortFree+0xc4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	4a06      	ldr	r2, [pc, #24]	@ (8003954 <vPortFree+0xc4>)
 800393c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800393e:	f7ff f9dd 	bl	8002cfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20012e28 	.word	0x20012e28
 8003950:	20012e18 	.word	0x20012e18
 8003954:	20012e24 	.word	0x20012e24

08003958 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800395e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003962:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <prvHeapInit+0xac>)
 8003966:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3307      	adds	r3, #7
 8003976:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <prvHeapInit+0xac>)
 8003988:	4413      	add	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003990:	4a1d      	ldr	r2, [pc, #116]	@ (8003a08 <prvHeapInit+0xb0>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003996:	4b1c      	ldr	r3, [pc, #112]	@ (8003a08 <prvHeapInit+0xb0>)
 8003998:	2200      	movs	r2, #0
 800399a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039a4:	2208      	movs	r2, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a15      	ldr	r2, [pc, #84]	@ (8003a0c <prvHeapInit+0xb4>)
 80039b8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <prvHeapInit+0xb4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <prvHeapInit+0xb4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <prvHeapInit+0xb4>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a10 <prvHeapInit+0xb8>)
 80039e6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <prvHeapInit+0xbc>)
 80039ee:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <prvHeapInit+0xc0>)
 80039f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039f6:	601a      	str	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	2000020c 	.word	0x2000020c
 8003a08:	20012e0c 	.word	0x20012e0c
 8003a0c:	20012e14 	.word	0x20012e14
 8003a10:	20012e1c 	.word	0x20012e1c
 8003a14:	20012e18 	.word	0x20012e18
 8003a18:	20012e28 	.word	0x20012e28

08003a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a24:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <prvInsertBlockIntoFreeList+0xac>)
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e002      	b.n	8003a30 <prvInsertBlockIntoFreeList+0x14>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d8f7      	bhi.n	8003a2a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d108      	bne.n	8003a5e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	441a      	add	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d118      	bne.n	8003aa4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <prvInsertBlockIntoFreeList+0xb0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d00d      	beq.n	8003a9a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e008      	b.n	8003aac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <prvInsertBlockIntoFreeList+0xb0>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e003      	b.n	8003aac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d002      	beq.n	8003aba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20012e0c 	.word	0x20012e0c
 8003acc:	20012e14 	.word	0x20012e14

08003ad0 <memset>:
 8003ad0:	4402      	add	r2, r0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d100      	bne.n	8003ada <memset+0xa>
 8003ad8:	4770      	bx	lr
 8003ada:	f803 1b01 	strb.w	r1, [r3], #1
 8003ade:	e7f9      	b.n	8003ad4 <memset+0x4>

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8003b18 <__libc_init_array+0x38>)
 8003ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8003b1c <__libc_init_array+0x3c>)
 8003ae6:	1b64      	subs	r4, r4, r5
 8003ae8:	10a4      	asrs	r4, r4, #2
 8003aea:	2600      	movs	r6, #0
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	4d0b      	ldr	r5, [pc, #44]	@ (8003b20 <__libc_init_array+0x40>)
 8003af2:	4c0c      	ldr	r4, [pc, #48]	@ (8003b24 <__libc_init_array+0x44>)
 8003af4:	f000 f818 	bl	8003b28 <_init>
 8003af8:	1b64      	subs	r4, r4, r5
 8003afa:	10a4      	asrs	r4, r4, #2
 8003afc:	2600      	movs	r6, #0
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003c58 	.word	0x08003c58
 8003b1c:	08003c58 	.word	0x08003c58
 8003b20:	08003c58 	.word	0x08003c58
 8003b24:	08003c5c 	.word	0x08003c5c

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
